<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jimmy Breck-McKye</title>
  
  <subtitle>Developing opinions</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.breck-mckye.com/"/>
  <updated>2024-04-14T19:49:02.966Z</updated>
  <id>http://www.breck-mckye.com/</id>
  
  <author>
    <name>Jimmy Breck-McKye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sephiroth, the Fake</title>
    <link href="http://www.breck-mckye.com/blog/2024/03/Sephiroth-the-Fake/"/>
    <id>http://www.breck-mckye.com/blog/2024/03/Sephiroth-the-Fake/</id>
    <published>2024-03-31T18:05:23.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Final Fantasy VII is about two men who discover they aren’t the heroes they wanted to be.</strong> The game is about other things - war, capitalism, ecocide to name a few - but I think how these men address their shame, and compete to overcome it, is its real engine.</p><p>I recently replayed the 1997 original as a way of preparing for <em>Remake</em> and <em>Rebirth</em>. I wanted a frame of reference and I way back into its stroy. But I was also surprised at how well it held up, 25 years later, and began to notice the plot details and narrative subtleties I overlooked when I was younger.</p><p>And so I found myself asking a question - why does Sephiroth <em>lie</em>? Why - exactly - does Sephiroth pretend that Cloud was never a real person? The answer I came to, put a new turn on a story I’d taken long for granted.</p><a id="more"></a><h2 id="Sephiroth’s-lie"><a href="#Sephiroth’s-lie" class="headerlink" title="Sephiroth’s lie"></a>Sephiroth’s lie</h2><p><img src="/images/2024/stf-1-lying.jpg" alt=""></p><p>I should be clear here. Cloud Strife is certainly a <em>fantasist</em>. He pretends to be a SOLDIER First Class and Sephiroth’s personal protege, witnessing the Nibelheim incident first hand. He fakes the life of an elite ex-SOLDIER. In truth, he flunked SOLDIER recruitment and was only at Nibelheim as a masked, anonymous grunt. Whilst he did confront Sephiroth, and even killed him, the rest of his story is stolen from Zack.</p><p>…But you probably already knew that.</p><p><img src="/images/2024/stf-2-zack.jpg" alt=""></p><p>The thing is, Sephiroth doesn’t just taunt Cloud with the truth. He goes a step further and says Cloud was never a real person to begin with. Just a clutch of mutant Jenova cells, constructed five years ago and assembled with Tifa’s memories. Why?</p><p><img src="/images/2024/stf-quote1.png" alt=""></p><p>I’ve heard some folk say it’s revenge for Cloud humiliating Sephiroth in combat. But I don’t think <em>revenge</em> is enough of a reason. If Sephiroth wanted to, he could brutalise Cloud quite easily.</p><p>No, I think that to understand Sephiroth’s sadism, you have to understand Sephiroth’s <em>shame</em>. Sephiroth is subjecting Cloud to his <em>own</em> shame at discovering he’s a constructed being, whose achievements aren’t even his own.</p><h2 id="Who-IS-Sephiroth"><a href="#Who-IS-Sephiroth" class="headerlink" title="Who IS Sephiroth?"></a>Who IS Sephiroth?</h2><p>When we’re introduced to Sephiroth, the Wutai War is over. The celebration of war heroes is fading away. It’s just as Cloud says: “How does it feel, MISTER Sephiroth?”. With no hometown or parents, and his status now fading, Sephiroth is a man at risk of losing his identity.</p><p><img src="/images/2024/stf-4-mister-sephiroth.jpg" alt="Cloud and Sephiroth ask each other about their feelings of identity"><br><em>Above: Cloud and Sephiroth ask mirrored questions about their feelings of identity</em></p><p>This question is what frames the Nibelheim incident, the experience they shared. It’s about Cloud and Sephiroth’s crises of <em>identity</em>.</p><p>At Nibelheim, Cloud and Sephiroth are <em>shamed</em>. Cloud is devastated by his failure to protect Tifa. Sephiroth discovers he’s a puppet, a manufactured being, and everything he thought he achieved, really belongs to Shinra and a scientist he despises. But they deal with their shame in opposing ways.</p><p>Cloud chooses denial. He steals the sword and the story of Zack Fair, a better hero than Cloud ever was. (Even the name “Zack Fair” sounds more honorable than “Cloud Strife”). He cobbles Zack’s war stories into a fake persona and lives a mercenary fantasy.</p><p>Sephiroth, on the other hand, embraces his truth. If he’s not human, why can’t he be superhuman? Like teenaged Cloud, he responds to humiliation with an ego-defending superiority complex. Sephiroth adopts the persona of a gleeful sadist, exactly the monster he sees in himself.</p><p><strong>But Sephiroth is a fake man too.</strong> Literally. Every time we see him, between the Flashback and the Whirlwind Maze, it’s really just Jenova taking Sephiroth’s form. The game doesn’t do a great job of explaining this, but it’s the reason we keep meeting Sephiroth and then fighting Jenova. These forms we meet are just carbon copies of Sephiroth as he used to be - the real Sephiroth is a half-dissolved torso, a corpse in a mako crystal.</p><p><img src="/images/2024/stf-5-seph-torso.jpg" alt=""></p><p><strong>If Sephiroth has a “thing”, throughout the FFVII Compilation, it’s his obsessive compulsion to re-create his image over and over</strong>. Through clones or hosts or mental projection, Sephiroth’s quote-unquote “superpower” is that his image <em>has</em> to persist through death. The same perfect body, over and over, never aging or dying.</p><p>It’s a mirror of Cloud’s own ego-protecting fantasy life. Neither man can let go of his self-image.</p><p>Sephiroth despises Cloud, I think, because Cloud is a fake man just like Sephiroth was, <em>and he isn’t even ashamed</em>. It’s projection: he says Cloud is a monster, a puppet, a fraud because that’s exactly how he witnesses himself. A half-human Shinra-manufactured fraudulent war hero. And that’s where his compulsion comes from, to regenerate his damaged self-image.</p><h2 id="Truth-versus-illusion"><a href="#Truth-versus-illusion" class="headerlink" title="Truth versus illusion"></a>Truth versus illusion</h2><p>But eventually, Cloud and Sephiroth’s contradicting stories have to collide. At the Whirlwind Maze, Sephiroth destroys Cloud’s fantasy because truth is more powerful than denial. He confronts Cloud with the inconsistencies in his story and forces Cloud to experience shame. He wants Cloud to feel exactly as he does, and that’s why he lies about Cloud’s origins.</p><p>Overwhelmed by the contradictions in his memories and compelled to hand over the Black Materia, Cloud is metaphorically and literally buried alive when the life-tree collapses and Sephiroth pulls them both underground.</p><p><img src="/images/2024/stf-6-north-cave.jpg" alt=""></p><p>With Tifa’s guidance, though, Cloud is able to recover. Painfully at first, he acknowledges his failures and opens up to his friends. He’s humble and accepts the mistakes of his past, without using it as an excuse to shirk responsibility for the present.</p><p>The “Great Sephiroth” can’t do that though. Sephiroth hides behind his half-alien heritage as an excuse. He knows well into the game that he’s no Cetra, he would just rather destroy the planet and erase his past than live in a world that humiliates him.</p><p>And ultimately, that’s why he loses.</p><h2 id="Endgame"><a href="#Endgame" class="headerlink" title="Endgame"></a>Endgame</h2><p>Deep in the planet’s core, Cloud confronts Sephiroth for the third and final time. Sephiroth has no dialog after the Whirlwind Maze - now that Cloud understands the truth, he has nothing left worth saying.</p><p><img src="/images/2024/stf-7-bizarro.jpg" alt=""></p><p>Sephiroth reveals his “Bizarro” form. I think this grotesque, bulbous mess is actually the real Sephiroth. The torso that remains of him is at the top and appears to be birthing his own, giant, undead body. This is the game’s only multi-team battle which illustrates Cloud’s journey, choosing friendship over fantasy.</p><p><img src="/images/2024/stf-8-safer.jpg" alt=""></p><p>The battle culminates in a showdown with the angelic “Sepher” Sephiroth. The fake man has reinvented himself as a fake god. The location is nonsensical: a floating sky palace actually deep underground. A backing track choir sings his praises in Latin as a “generous, glorious” god. He fights with illusions, at one point he appears to do no less than <em>temporarily destroy the entire solar system</em>.</p><p>This fight is full of ironies. Even in his ‘perfect body’, Sephiroth is still missing his legs. Literally half a man, Sephiroth now wears a fake halo and a model star - in his grandest illusion, he wears only a <em>costume</em>. It’s like his self-image, permanently maimed by his defeat at Nibelheim, can’t fully compensate for his shame. That face is the rage of someone humiliated, someone <em>seen</em>.</p><p><em>Shame</em> is the secret weakness of Sephiroth’s soul. The compulsion to project his image over and over, initially a super power, ultimately traps him. He can’t escape his wounded self-image the way Cloud can, his compulsion to project illusions in defence of his ego. But illusions are no match for reality. Defeated, Safer-Sephiroth’s illusory body shatters into pieces and dissolves into air - literally, a hollow man.</p><p><img src="/images/2024/stf-9-shatter.jpg" alt=""></p><p>There’s one more finale. Visually abstract, and shrouded in darkness, this one-on-one is depicted as some last, psychological projection. Having overcome the folly in his mind, Cloud unlocks his full potential, and breaks Sephiroth’s ghost into nothing but light.</p><p><img src="/images/2024/stf-10-ending.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Final Fantasy VII is about two men who discover they aren’t the heroes they wanted to be.&lt;/strong&gt; The game is about other things - war, capitalism, ecocide to name a few - but I think how these men address their shame, and compete to overcome it, is its real engine.&lt;/p&gt;
&lt;p&gt;I recently replayed the 1997 original as a way of preparing for &lt;em&gt;Remake&lt;/em&gt; and &lt;em&gt;Rebirth&lt;/em&gt;. I wanted a frame of reference and I way back into its stroy. But I was also surprised at how well it held up, 25 years later, and began to notice the plot details and narrative subtleties I overlooked when I was younger.&lt;/p&gt;
&lt;p&gt;And so I found myself asking a question - why does Sephiroth &lt;em&gt;lie&lt;/em&gt;? Why - exactly - does Sephiroth pretend that Cloud was never a real person? The answer I came to, put a new turn on a story I’d taken long for granted.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="videogames" scheme="http://www.breck-mckye.com/tags/videogames/"/>
    
  </entry>
  
  <entry>
    <title>The Minimalism of Tomb Raider (1996)</title>
    <link href="http://www.breck-mckye.com/blog/2023/10/The-Minimalism-of-Tomb-Raider-1996/"/>
    <id>http://www.breck-mckye.com/blog/2023/10/The-Minimalism-of-Tomb-Raider-1996/</id>
    <published>2023-10-18T17:46:21.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I played Tomb Raider 1 for the first time. After I got over the controls and very cheesy voice acting, I was struck by the clarity of its design. The word I want to use is “minimalistic”, but it’s more fundamental than that. “Restrained”, “pure”, “immersive” are other words I could use, but none of them are quite enough to capture what makes this game so great.</p><p>TR1 is a little hard to get into as a modern game. The old TR games use tank controls, where you rotate and move Lara relative to her current heading, as opposed to modern 3D games where you move relative to the camera. It felt clunky at first but after a while I really started to grasp its elegance.</p><a id="more"></a><p><img src="/images/2023/tr1-grid.jpg" alt=""></p><p>You see, Tomb Raider is built on a strict grid system, and Lara’s movement can be measured in squares. Every step is half a square, every running jump exactly two squares, and once you grasp the rules you know exactly what you can and cannot do. There is no ambiguity, no hidden walls, no sneaky missed jumps, it is a system that is completely consistent.</p><p>Gameplay is not fast paced, it is considered and challenging. You are expected to observe the surroundings and make your own way, using your knowledge of the movement rules, and few clues beyond that.</p><p><img src="/images/2023/tr1-env.jpg" alt=""></p><p>Speaking of which, a big part of Tomb Raider is sound. The theme is classic and well loved, but outside of fights TR’s music is generally very understated and ambient. Sometimes the game is silent entirely. This proves important because TR’s combat is <em>punishingly</em> hard, and enemy sounds are an important warning you’ll always be listening out for. Other times, sound provides clues about your environment that are critical to the game’s puzzles.</p><p>Listening for clues, observing the environment, watching out for traps and secrets, moving with care and precision - your discipline doing this will make or break your adventure. Tomb Raider is incredibly tense and demands you give it sustained focus.</p><p><img src="/images/2023/tr1-ui.jpg" alt=""></p><p>I think that’s also why Tomb Raider has such a minimal UI. The user interface is very stripped back: unless you’re armed or in poor health, there’s no heads up display, and the health bar when it does appear comes in very understated gold. A nice nod to the treasure theme but which also prevents the HUD distracting from the environment.</p><p>There’s no radio chatter either (unlike certain other TR games…) You really do feel like a solo adventurer, completely self-reliant in a hostile environment. When you finally scale the game’s awesome structures, it feels like conquering a physical and metaphorical mountain.</p><p><img src="/images/2023/tr1-horror.jpg" alt=""></p><p>Loneliness helps the supernatural elements land a lot better too, like when Lara suddenly runs into a T-Rex in the lost valley - or the Gigeresque body horror of Atlantis. These moments just wouldn’t work if we had to explain to a radio sidekick how dinosaurs had survived, or why Atlanteans exist. It would be a distraction, and it would lose its mystery.</p><p>TR1 then is very much about focus - on the world, on the player, on the movement - and with that focus comes the player’s strong sense of <em>self</em>. I very much feel like <em>I</em> am the one controlling Lara, <em>I</em> am solving the puzzles, <em>I</em> am beating the levels.</p><p>Yes, the tank controls are granular, but that’s partly the point: <em>you</em> have to input every movement Lara needs to move, yourself. If she needs to turn a corner, <em>you</em> must rotate her. If she needs to grab a ledge, <em>you</em> must put her guns away. Nothing happens automatically, every success is your own.</p><p><img src="/images/2023/trl-qte.jpg" alt=""></p><p>Compare that to <em>Tomb Raider Anniversary</em> or <em>Legend</em>, where the controls are much more automated. Lara will grab ledges automatically; you can mash O to do acrobatics, and the game leans very heavily on Quick Time Events.</p><p>It’s not an invalid design philosophy, but when I play <em>Legend</em>, I think, “wow, look at the cool thing Lara can do” - whereas in TR1 I think “look at the cool thing <em>I did</em>“. The new controls are more fluid and fast paced, but they lose some sense of accomplishment.</p><p>That’s not to say TR1 is perfect. The combat is weak, and camera flails about when enemies are nearby, and killing enemies is a chore. But I think you have to forgive that for a game that was innovating so much.</p><p>Which brings me onto the remaster. It’s not clear, right now, how the re-releases will handle the original game’s design. Will they alter the tank controls, or will they stick proudly to the original system? Will they improve the combat, or leave it as is? Do you think the game’s systems still hold up, or is Tomb Raider 1996 strictly an ancient relic?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I played Tomb Raider 1 for the first time. After I got over the controls and very cheesy voice acting, I was struck by the clarity of its design. The word I want to use is “minimalistic”, but it’s more fundamental than that. “Restrained”, “pure”, “immersive” are other words I could use, but none of them are quite enough to capture what makes this game so great.&lt;/p&gt;
&lt;p&gt;TR1 is a little hard to get into as a modern game. The old TR games use tank controls, where you rotate and move Lara relative to her current heading, as opposed to modern 3D games where you move relative to the camera. It felt clunky at first but after a while I really started to grasp its elegance.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="videogames" scheme="http://www.breck-mckye.com/tags/videogames/"/>
    
  </entry>
  
  <entry>
    <title>Microfrontends should be your last resort</title>
    <link href="http://www.breck-mckye.com/blog/2023/05/Microfrontends-should-be-your-last-resort/"/>
    <id>http://www.breck-mckye.com/blog/2023/05/Microfrontends-should-be-your-last-resort/</id>
    <published>2023-05-29T12:44:49.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>In large tech companies these days, it is becoming common for front-end developers to talk about “micro frontends”. MFEs are analogous to microservices in backend systems. But just like we’ve all seen bad microservice architectures that simply worsened a distributed monolith, a bad micro-frontend architecture just spreads tightly-coupled code across many moving parts.</p><p>My argument is not that MFEs never pay off their complexity. I think that for a sufficiently large team, with well factored domains, having separate pipelines within a monorepo arrangements is a reasonable design for keeping teams moving independently.</p><p>But my scepticism is that few teams are in this position, and the ones that are, should work on factoring their domains first, before adopting a more complex architecture. The many moving parts of MFEs make it much harder to release, move and test code in a coherent effort.</p><p>Instead, start with a modular monolith and do the hard work of refactoring your domains before the easy work of creating new pipelines.</p><h2 id="A-primer-on-micro-frontends"><a href="#A-primer-on-micro-frontends" class="headerlink" title="A primer on micro-frontends"></a>A primer on micro-frontends</h2><p><em>Micro-frontends</em> (MFEs) are not a stupid idea. We all intuitively know that software systems are easier to evolve if they can be split into isolated parts. There’s no intrinsic reason that front-end JavaScript apps don’t benefit from the same modularisation once they reach a certain size.</p><p>Microservices are similar. The idea of microservices on the backend was originally sold as a way to make systems more scalable under load, but the real motive was that it’s easier to scale teams if each one gets its own walled context to work in, free of interference.</p><p>MFEs have history. Back in 2016 I worked on an MFE-like architecture at The Guardian, where our goal was to completely isolate the ad-tech, news and feature code, which meant that you could read the news without waiting for, say, the <em>crosswords</em> code to download, or the adware bloat. These architectures weren’t called anything because they were just solutions to specific technical problems.</p><p>Eventually enough companies found themselves doing this that they coined a name for it, micro-frontends, meant to evoke the intuitive benefits of microservices. The usual pattern is that instead of one JavaScript app in one repo with one pipeline, you split out N apps into N repos with N pipelines. Occasionally the apps are held in a monorepo arrangement, but that’s not universal.</p><h2 id="Problems-with-MFEs"><a href="#Problems-with-MFEs" class="headerlink" title="Problems with MFEs"></a>Problems with MFEs</h2><p>Microfrontends are very popular on the conference circuit, so I am probably about to make future job interviews awkward by criticisng them. But I’m seeing enough teams adopt MFEs at the wrong time to feel concerned about the hype. My objections boil down to three core complaints</p><ol><li>A monolith distributed over separate parts is a world of pain</li><li>You need to refactor before you can split, but splitting first looks easier</li><li>MFEs can be a form of rewrite fever</li></ol><h3 id="Don’t-distribute-your-monolith"><a href="#Don’t-distribute-your-monolith" class="headerlink" title="Don’t distribute your monolith!"></a>Don’t distribute your monolith!</h3><p>Those of us who’ve worked on backend microservice transitions have probably witnessed an anti-pattern when instead of getting cleanly separated, independent microservices, we find ourselves with a complex hairball of dependencies now split over servers. This is dubbed a “distributed monolith” and it’s painful because the same interdependence still exists, but now it’s mediated over things like HTTP calls or events.</p><p>Most large frontend apps that would be candidates for MFEs have this level of interdependence. This leads to MFE architectures proposing some kind of context sharing or mechanism for passing around state. That could be JavaScript bundles exposing global functions or using <code>postMessage</code> as an event bus. The more state that gets shared, the more dependencies that exist, the further away you are from actual isolation.</p><p>Why is this worse than having interdependencies within a monolith? Because within a monolith, you can refactor very easily. You can remove the dependency from <code>A -&gt; B</code> by changing A and B in a single commit. You can understand the dependencies by looking around a single repository. You can have TypeScript verify that nothing is using A’s method any more. You probably have a single test pipeline to verify the change.</p><p>Microfrontends have overheads if you aren’t smart about this. You can end up having to deploy code in multiple places in careful orchestration. You can end up with shared code that has to be released with an awkward versioning mechanism. You have to invent a way to integration test everything. Your engineers have to sniff around multiple repositories to understand how the whole thing fits together. That’s not a scalable developer experience.</p><p>My view on MFEs, when they exist, is that any dependencies should be carefully vetted and factored down to the absolute minimum. At <em>The Guardian</em> our “MFEs” didn’t share <em>any</em> state at all. But factoring down dependencies hard when your code is a tightly-coupled mess, which leads to the next point.</p><h3 id="Decouple-before-you-split"><a href="#Decouple-before-you-split" class="headerlink" title="Decouple before you split"></a>Decouple before you split</h3><p>So let’s say our frontend app is a hairball that’s full of interdependencies. How do we break that link? I think engineers - and managers! - are so excited about the prospect of escaping the monolith, they forget about the intermediary stage of actually chopping up the hairball.</p><p>Refactoring any code is hard, uncomfortable, and thankless, but just like brushing your teeth or going to gym you can only avoid it so long before the consequences get to you. If you try splitting an app without decoupling its parts, one of two things happen</p><ol><li>You get a distributed monolith (see above)</li><li>You manage to turn the isolated parts into MFEs (the pages with no dependencies), but the big complex pages never actually get migrated</li></ol><p>What does good decoupling look like?</p><ol><li>Each part of the code belongs to a distinct <em>domain</em>, a particular area of the business, or it belongs to a shared “support” domain</li><li>Each domain is, conversely, implemented in a distinct part of the code - it’s not smeared over several parts</li><li>The parts of the code interact over a small, well-factored interface. Ideally type-safe.</li></ol><p>You might be tempted to skip decoupling and say you’ll do it as you migrate the code. This is a bad idea. You end up in a half-migrated state where part of the code is moved but the rest can’t be decoupled. You want to minimise the scope of each incremental change you make, not try to combine refactoring and replatforming into a single mission.</p><h3 id="MFEs-can-be-a-form-of-rewrite-fever"><a href="#MFEs-can-be-a-form-of-rewrite-fever" class="headerlink" title="MFEs can be a form of rewrite fever"></a>MFEs can be a form of rewrite fever</h3><p>Sometimes engineers (and manager) get so sick of working in a bad codebase that they fantasise about throwing the lot away. In microfrontend projects, teams sometimes feel they can use MFEs to effectively rewrite the codebase from scratch, avoiding all the complexity of the original project.</p><p>Rewrites are really dangerous. They’re tempting because writing code is much easier than reading it. Developers imagine that with modern tools and consolidated knowledge, they can do a much better job than the original engineers. There is a bit of main character syndome here (the last project was a disaster because _I_ didn’t write it). But the rewrite turns out to be more complicated than expected, because the old code was full of secrets and edge cases that weren’t obviously apparent.</p><p>My experience of rewrites is that they <em>start</em> great. Early on velocity seems high as you’re focused on scaffolding the new code and adding tools to the codebase. It’s when you start implementing the <em>features</em> that things get sticky. Rewrites are sold as everything to everyone and end up becoming a way bigger project than you first imagined.</p><p>Usually in MFEs the motiviation is a monolith codebase that’s bad enough, to make rewrites a strong temptation. But if you’ve reached that point, your pages and UI is too complex to just be rewritten in a few weeks. The <code>Product</code> page that accumulates five years of code is going to take a lot of work to understand and unpick alone. Moving it into a Next.js app isn’t going to shortcut that. An incremental rewrite via MFEs is better than a total rewrite in a new monolith, but not by a lot.</p><h2 id="Modularisation-before-MFEs"><a href="#Modularisation-before-MFEs" class="headerlink" title="Modularisation before MFEs"></a>Modularisation before MFEs</h2><p>What is to be done, then, about frontend repositories that reach such a critical mass they can’t be worked on effectively? My advice is to start with <strong>modularisation</strong>.</p><p>Keep a single repo and build, for the moment, but start organising your code into packages with very strict architectural boundaries. Have these packages only interact via well-defined, minimal interfaces, ideally just a small user context object with basics like ID and tokens. Packages can share idempotent state like API caches but they don’t share context like Redux stores or React context.</p><p>As you split the code up, <em>then</em> you can implement things like Yarn workspaces that are designed for managing a monorepo. This lets you do things like split up the unit tests and only execute suites for the parts that have changed. This starts bringing in MFE-like benefits without all the overhead.</p><p>Over time you can move <em>incrementally</em> to a microfrontend-like architecture that sits inside a monorepo, with separate pipelines and fully differential builds.</p><p>Why a monorepo? In my experience it’s a good tradeoff between oversight and independence. You can still typecheck a monorepo app as a single unit, whilst building and deploying modules independently. Code can be shared without complex versioning and packaging; you can implement separate deployment pipelines with a little effort, but it’s much easier to move code across packages as you need to.</p><p>Oversight matters. By the time you reach this level of complexity, you <em>need</em> a team who are acting to oversee the overall architecture and provide common tooling. If you let every team diverge you’ll get chaos.</p><p>Refactoring _is_ hard. In one frontend I’ve worked on, with over 400,000 lines of source code (and I mean <em>not</em> including dependencies), I ended up writing a program just to understand the codebase itself. It used the AST (abstract syntax tree) of each file to discover when components were reading or writing Redux data, parsed that into a graph, and then let you execute queries against the graph to understand that ties between different pages. The graph data alone was hundreds of kilobytes.</p><p>But by doing this, now we could visualise the problem. Before, the argument was that we could just rewrite everything via MFEs and engineers would just kind of figure things out as they went. When we could visualise the graph of data dependencies, we could see how difficult this would be without a dedicated effort to decouple the domains in the code.</p><h3 id="Appreciating-the-tradeoffs"><a href="#Appreciating-the-tradeoffs" class="headerlink" title="Appreciating the tradeoffs"></a>Appreciating the tradeoffs</h3><p>Despite all the criticism above, I think in time this app <em>could</em> become something like a microfrontend project, although with more control and oversight than the polyrepo MFEs I see other organisations adopting. But it will only do so once the domain isolation and design-level refactoring is largely complete. <em>Then</em> the parts of the codebase will be sufficiently isolated for us to work on them independently.</p><p>You could call this microfrontends by stealth; I call it agile architecture.</p><p>Don’t take on big hero projects to implement The Grand New Architecture you’ve read about. Identify your problems, move towards them iteratively, and don’t try to skip the hard work of figuring out how to split the code into <em>genuinely</em> separated units, or all you’ll get is your horrible frontend monolith turned into a distributed monolith MFE.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In large tech companies these days, it is becoming common for front-end developers to talk about “micro frontends”. MFEs are analogous to
      
    
    </summary>
    
    
    
      <category term="software-engineering" scheme="http://www.breck-mckye.com/tags/software-engineering/"/>
    
      <category term="javascript" scheme="http://www.breck-mckye.com/tags/javascript/"/>
    
      <category term="front-end" scheme="http://www.breck-mckye.com/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>The pre-post-COVID chronicles</title>
    <link href="http://www.breck-mckye.com/blog/2022/02/Pre-post-COVID-Chronicles/"/>
    <id>http://www.breck-mckye.com/blog/2022/02/Pre-post-COVID-Chronicles/</id>
    <published>2022-02-01T22:29:01.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>On the 27th January, 2022, the UK eased back its Coronavirus “plan B” restrictions - such as they were. I was hoping I’d feel something more momentous and freeing. What I’m actually feeling is much more murky and ambiguous. This winter has been tough, and I, I feel like it has changed me.</p><p>Some words: I know, objectively, the last three months have been some of the softest restrictions we’ve been under, anyone’s been under.</p><p>As seasons go, it was nowhere as tough as two years ago, when the world came to a standstill; it was nowhere as tough as one year ago, when the virus tore through our hospitals and care homes; it was nowhere as wretched and painful and pitiless as last Christmas, which I spent alone. But - for me - I found myself far more drained, more dispirited and even disturbed. This time I couldn’t see path back to normal.</p><p>At the time the first lockdowns broke out, April 2020, I treated it as a bargain, a trade, a compromise made with the world, the kind of thing you narrate to give yourself some agency when you’re really under compulsion. <em>“I will give up my job and my friends and my freedom”</em>, I said to the world, tightening my chest, <em>“and you will give us time to invent a vaccine”</em>. The world obliged. <em>“I will give up this year, I will give up on touching any other person”</em>, chest raising again, <em>“and you will give us time to vaccinate”</em>. And so it went.</p><p>This Christmas was different. We weren’t staying home to make new medicine, distribute jabs, or get “on top” of Coronavirus (what was that ever supposed to mean?). It wasn’t a deal we were making with the world, something we could rationalise as a choice. Omicron came, it killed, we stayed at home, to banish the nth variant of x variants, until the nth + 1 comes along, and it suffocates us again.</p><p>But what was I really after? I’ve spent two years pining for a “return to normal”, meaning that I hoped the world of 2022 would be the same as the world of 2019. But… that couldn’t ever be so, coronavirus or no. Things change.</p><p>There’s a saying that being critical is, fundamentally, being disappointed people weren’t who you wanted them to be - which underlines quite nicely how absurd it really is. Obviously, living under the pandemic has been awful. Screamingly, pitilessly, nail-rendingly awful, the kind of awful that every so often just leaves me reeling and agape at all we’ve taken in these 24 months. But I’ve also carried a share of disappointment and even anger simply that the world has changed, that it couldn’t be like the version of the pre-pandemic world I carried in my head. A world of infinite freedoms, rich social life and personal fulfilment.</p><p>Looking back… I might have overrated that. Where was I in 2019? For one thing, I was a workaholic. I don’t mean ‘spends too long on presentations when he could be watching <em>The Witcher</em>‘. I mean, I had a problem: using work and career to regulate my emotional state, which is really a kind of (socially acceptable) dependency. I want to write about this at length elsewhere, and how destructive it is, because it feels like doing the right thing.</p><p>But in 2019 I was overworked, obese, I rarely dated, I didn’t take care of myself, my sleep was awful, I relied on work drinks to prop up my social life, I bought stuff - objects, clothes, holidays - to try and make peace with how unhappy I was. And then I look where I am now, what I’ve gained over the pandemic:</p><ul><li>I might not go for drinks every Friday now, but I have a small circle of meaningful friendships. Some people I can only talk to online, because they’re shielding - but I know I can rely on them.</li><li>I’ve lost a huge amount of weight, about 16kg (two and a half stone). I look better and I feel great. Most importantly, I’ve cut several risk factors for diabetes: this is life-changing stuff. I can look at myself in the mirror without cringeing.</li><li>I dated someone last year… briefly. It wasn’t a long relationship and it ended abruptly - but I didn’t sit around doing nothing. I didn’t let work get in the way. I did things.</li><li>I moved into a home I <em>like</em>. One that doesn’t feel like a compromise, in a place I like, a community I could settle in.</li><li>I can run! Yeah, I know, running is the most vanilla of pandemic hobbies, even more painfully virtuous than baking, but it’s <em>my thing</em> now. I did my first 10k a few months ago; the last one I did in 51 minutes.</li></ul><p>Am I really sure I want to roll the world back to 2019? That was two and a half years ago. Things change. I changed.</p><p>There’s a larger point about the pandemic. You know, before COVID hit, movies taught us the biggest threat in an apocalypse would be the masses going feral; rioting and anarchy; that the moment the norms of the world dissolve, humanity’s bestial instinct would tear up the tenuous veneer of civilisation. just you watch. Actually, in this apocalypse, it was the opposite.</p><p>But the problem this time, were the people wishing the world “back to normal”. Plugging their ears and “doing their own research” in favour of living their lives exactly as they always had done. The people who yanked folk back into the office and smouldered with anger to think someone might be <em>working from home</em> (obviously a skiver). The biggest danger in COVID-19, after the virus itself, were the people who desparately wanted to believe it was still 2019.</p><p>Nostalgia is an intoxicant. It’s fun to visit once in a while but if you live that way 24/7 it distorts your view of what’s good about today, what we can gain from change. I’ve spent all this time howling in pain and disappointment that life has been stopped and I’ve forgotten to take stock.</p><p>I am cautious about 2022. I think it will take time for us to emerge again. I think it will be hard to risk disappointment. I think we will try impersonating the people we were three years ago only to realise we’re not quite them any more, and we don’t quite want what they did. The healthiest thing is to embrace that.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;On the 27th January, 2022, the UK eased back its Coronavirus “plan B” restrictions - such as they were. I was hoping I’d feel something m
      
    
    </summary>
    
    
    
      <category term="covid-19" scheme="http://www.breck-mckye.com/tags/covid-19/"/>
    
  </entry>
  
  <entry>
    <title>Things I&#39;ve learned after two stones of weight loss</title>
    <link href="http://www.breck-mckye.com/blog/2021/12/Things-I-ve-learned-after-two-stones-of-weight-loss/"/>
    <id>http://www.breck-mckye.com/blog/2021/12/Things-I-ve-learned-after-two-stones-of-weight-loss/</id>
    <published>2021-12-09T23:38:24.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>ON FEBRUARY 26, 2021 I had an urgent, painful and life-saving revelation: I was fat. Not overweight or curvy, I was obese, again, five years after my last diet effort, and being obese was stopping me changing my life in the ways I wanted.</p><p>What began there was eight months of gradual, sometimes spotty, sometimes rapid weight loss from 96kg to 81kg (or 2.4 stones). That’s about 16% of my total body weight, and is still ongoing (I’d like to hit 77kg). It was gradual and spotty because I had a lot of things to learn and made several mistakes along the way.</p><p>I want to write about these mistakes, in part to share them with other people but largely because I suspect I will drift towards making the same mistakes in three years’ time, and don’t want to spend another year re-learning them.</p><p>They come in no particular order, however</p><h2 id="If-it-doesn’t-feel-like-effort-you-probably-aren’t-losing-weight"><a href="#If-it-doesn’t-feel-like-effort-you-probably-aren’t-losing-weight" class="headerlink" title="If it doesn’t feel like effort, you probably aren’t losing weight"></a>If it doesn’t feel like effort, you probably aren’t losing weight</h2><p>Sorry. This one is a blow. This is the one I was hoping wasn’t true, because I didn’t believe I was up to the demand. A lot of the diet advice out there is really tailored around a (contradictory) demand: “how can I change the shape of my body, without experiencing any stress doing so?”</p><p>But the only times I saw my body seriously losing weight was when I was regularly hungry. Hunger is something that can be managed and mitigated but I don’t think it can be avoided. Trying to change your metabolic pathways and deprive your organs of glucose won’t feel nice, for a while. It will get easier, but it won’t go away.</p><h2 id="Hunger-isn’t-as-bad-as-you-fear"><a href="#Hunger-isn’t-as-bad-as-you-fear" class="headerlink" title="Hunger isn’t as bad as you fear"></a>Hunger isn’t as bad as you fear</h2><p>I spent a long time overweight because I was trapped by my fear of hunger. I’m not certain where this came from but I _do_ remember long stretches of hunger as a teenager, which was a time of quite disordered eating for me. As an adult I carried with me a dread anxiety of being left even mildly underfed, particularly the idea of going to bed hungry.</p><p>But this year I discovered intermittent fasting and one of its psychological benefits has been adapting me to hunger by repeated, controlled, exposure. I <em>know</em> I have food ready and waiting for me at the end of my fasting period, but I have to make it through the waves of hunger and get to feel the ninety-minute cycles of peaks and troughs. Knowing hunger dissipates, wanders, sinks into the background, and that I can distract myself out of it has been a powerful lesson.</p><h2 id="It-does-take-a-while"><a href="#It-does-take-a-while" class="headerlink" title="It does take a while"></a>It does take a while</h2><p>Not least because you will inevitably make mistakes as you learn to balance your calories and macros. The diet that sounds solid on paper may disintegrate the first few times you experience strong sugar cravings. Or you may miss a macro like protein and end up with unbearable need for meat and pulses. Or you might decide that you can ‘get away’ with a few too many sweet treats and accidentally negate your calorie deficit. It does happen.</p><h2 id="Protect-your-deficit"><a href="#Protect-your-deficit" class="headerlink" title="Protect your deficit"></a>Protect your deficit</h2><p>On that point, treats and snacks will wipe out your calorie deficit before you know it. Every day you diet, you plan out meals to leave yourself a specific number of calories short of your TDEE, to force fat metabolism. But a 500 cal deficit can be cut directly in half by a single serving of cookies or chips - and that halves your weight loss for that day.</p><p>Overindulge a couple of times a week and you could reduce your 1lb a week weight loss to maintenance calories. And you won’t notice for two weeks because it takes that long to see the difference.</p><p>Snacks are really dangerous in the form of a bag or pack that doesn’t have a clear serving size. They’re basically unbounded calories. That’s one reason I’ve chosen to simply stop buying them. They aren’t in my home any more.</p><h2 id="Fasting-is-great"><a href="#Fasting-is-great" class="headerlink" title="Fasting is great"></a>Fasting is great</h2><p>As someone who experiences very little hunger in the morning, intermittent fasting has been fantastic for restricting my calories by limiting my opportunities to eat. It’s also introduced me to the richness and depth of black coffee. Yes, I’m becoming one of those people.</p><p>Longer fasts are not easy. They are a serious endurance, make demands of your body and concentration, require great focus and discipline. However, whilst fasting is not an <em>easy</em> way to lose weight, it is a <em>simple</em> one. It is unambiguous and resistant to any mental tricks you might play on yourself, like miscounting calories or overestimating serving sizes. You can’t half-fast. Whilst you are fasting, you just don’t eat.</p><h2 id="Rethinking-meals"><a href="#Rethinking-meals" class="headerlink" title="Rethinking meals"></a>Rethinking meals</h2><p>You don’t have to eat X square meals a day, and you don’t have to eat at all one day if you’ve overindulged (some electrolytes and vitamins are recommended if you do a day fast though). You can try and get away with a sandwich or promise yourself a better meal at the end of a longer fast. It’s hugely valuable to build a habit of only eating when you’re actually hungry.</p><h2 id="Cravings-are-not-hunger"><a href="#Cravings-are-not-hunger" class="headerlink" title="Cravings are not hunger"></a>Cravings are not hunger</h2><p>They are something else, they should be listened to but not obeyed mindlessly. Cravings for sugar aren’t a response to something your body needs, but actually (and I will use some strong language here) a kind of addiction. Do you feel comfortable that you have a dependency on sweets and junk? For me it felt disempowering and I tapped into that offended sense of free will to push back.</p><p>However, some cravings are important. Protein is a big one. If you find yourself craving meat and pulses, that could indicate that recently you haven’t been giving yourself enough. You can break your fast with lean proteins: eggs, tuna, chicken, beans.</p><h2 id="Huel-is-pretty-decent-actually"><a href="#Huel-is-pretty-decent-actually" class="headerlink" title="Huel is pretty decent, actually"></a>Huel is pretty decent, actually</h2><p>Worse than being a Coffee Guy, I may become a Huel Guy. Whilst your eyes are rolling, let me remonstrate: Huel and similar products are an excellent way to break your fasts with lots of protein and very strictly controlled calories (preventing bingeing). You are absolutely certain that e.g. a shake of two Huel scoops contains 400 calories and a decent chunk of your daily nutrients.</p><p>And if you use very cold water and a proper blender, it’s actually <em>quite pleasant</em>. Nothing to write home about, but it’s filling for what it is, somewhat sweet, and at the right consistency - like a thick protein shake. And when you’re hungry enough, anything will taste good. Give it a try.</p><p>Most of all, things like Huel are convenient. Eating well can be so difficult, you need every convenience you can take.</p><h2 id="Being-utilitarian-about-food-might-be-a-virtue"><a href="#Being-utilitarian-about-food-might-be-a-virtue" class="headerlink" title="Being utilitarian about food might be a virtue"></a>Being utilitarian about food might be a virtue</h2><p>I think culturally, at least in Britain, we are big about making identity and social connections over a shared love of food, whether it’s gut-sticking weekend feasts or sneaky treats or seasonal pleasures like an ice cream at the beach. However. It is also a commercial enterprise that exploits that cultural charge to, well, sell us things.</p><p>Walk into your local coffee chain and you’ll see decals everywhere of hot chocolate smothered in mountains of cream, groaning under their own weight; cinderblock bricks of carrot cake; cheese toasties oozing lustfully. The effect isn’t just to tempt us when we’re feeling vulnerable to their charms, but to imply certain norms about luxury foods. It <em>should not be the norm</em> to drink a coffee with the same calorie load as a chocolate eclair and shrug it off without altering the rest of our daily calories. It <em>should not be the norm</em> to treat an 800kcal ham and cheese panini as a ‘snack’ rather than a full lunch.</p><p>Nor should it be the norm to celebrate good times (or bad) with food. I got into that in a bad way. Every high or low meant a takeaway. So was every night of overtime at work or just a night feeling lazy and in need of a pick-me-up. Each of these indulgences was a calorie surplus I was never getting rid of. Over the years it makes you bigger and you forget that food doesn’t have to be a sensory barrage. Food can be boring and six days out of seven it probably should be.</p><h2 id="Taking-photos-will-boost-you"><a href="#Taking-photos-will-boost-you" class="headerlink" title="Taking photos will boost you"></a>Taking photos will boost you</h2><p>So will buying new clothes. Track your progress obsessively and celebrate when you make it through a plateau or an important number. Obviously, don’t celebrate with food.</p><h2 id="It-gets-easier"><a href="#It-gets-easier" class="headerlink" title="It gets easier"></a>It gets easier</h2><p>It really does. Initially you have everything against you:</p><ul><li>sugar cravings</li><li>low energy</li><li>a distorted sense of how often to eat</li><li>a distorted sense of portions</li><li>a distorted sense of macros</li><li>force of habit</li><li>low tolerance of hunger</li></ul><p>But as you diet (if you diet successfully) you gradually chip away at each of these. There is a compound effect and you build momentum. You think the initial kilos will be easy and the later ones will be tough, because your body fights back - actually, I’ve found my most recent pounds to be no more effort at all, perhaps even less in some ways, because although dieting is <em>hard</em> good habits make it <em>simple</em>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ON FEBRUARY 26, 2021 I had an urgent, painful and life-saving revelation: I was fat. Not overweight or curvy, I was obese, again, five ye
      
    
    </summary>
    
    
    
      <category term="health" scheme="http://www.breck-mckye.com/tags/health/"/>
    
  </entry>
  
  <entry>
    <title>The PSOne Crash Bandicoot games are beautiful in 4K</title>
    <link href="http://www.breck-mckye.com/blog/2021/10/The-PSOne-Crash-Bandicoot-games-are-beautiful-in-4K/"/>
    <id>http://www.breck-mckye.com/blog/2021/10/The-PSOne-Crash-Bandicoot-games-are-beautiful-in-4K/</id>
    <published>2021-10-08T21:37:26.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>Modern emulator cores like BeetleHW allow you to play old-school PSOne games in new-school high resolution. Games that rely heavily on polygonal graphics, rather than textured graphics, benefit the most. And as a fan of the original <em>Crash Bandicoot</em> games my eyes just popped to see them brought to vivid life on a 4k, widescreen display.</p><p><em>Right click any image + open in new tab for a full sized view. Or view the gallery on <a href="https://imgur.com/gallery/pgGLvLq" target="_blank" rel="noopener">imgur</a>.</em></p><p><a href="https://i.imgur.com/Pw2JMiM.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/Pw2JMiMh.png" /></a></p><a id="more"></a><p>Upscaling classic games matters. It’s not just that graphics designed for 90s CRTs look like crap on modern LCDs, or that modern sensibilities have spoiled us from enjoying simpler graphics. It’s that upscaling allows players to soak in far more detail that was visible originally; preserving the original vision and helping out older gamers whose eyesight might not be as it was 20 years prior.</p><p><a href="https://i.imgur.com/Ksc9Cwf.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/Ksc9Cwfh.png"/></a></p><p>There’s a quote about <em>Crash Bandicoot</em> that always stuck out for me:</p><blockquote><p>The secret to Crash’s success was its Art. And the secret to its Art was its Programming.</p><p>[…] To that effect, we took the very unusual step of hiring real “Hollywood”  cartoon designers to help with the visual part of the production. This  was Mark’s idea at first, although Jason and I saw the brilliance of it immediately.</p></blockquote><p>You can read all about the genesis of <em>Crash</em> on <a href="https://all-things-andy-gavin.com/2011/02/02/making-crash-bandicoot-part-1/" target="_blank" rel="noopener">Andy Gavin’s website</a>, but the upshot was that Naughty Dog wanted to create a <em>playable cartoon</em>. The bold shapes and sharp colours made Crash play like a Saturday morning series - complete with Wile E Coyote style death animations.</p><p>4K <em>Crash Bandicoot</em> is about as close as it gets.</p><h2 id="What-do-you-think-he-means-to-do-with-that-pig"><a href="#What-do-you-think-he-means-to-do-with-that-pig" class="headerlink" title="What do you think he means to do with that pig?"></a>What do you think he means to do with that pig?</h2><p>Crash 1 is the simplest of the games graphically, but it still holds up pretty well.</p><p><a href="https://i.imgur.com/gWUtgBR.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/gWUtgBRh.png"/></a></p><p>This is the simplest of the Crash models. He runs around with a face locked in perpetual anxiety.</p><p><a href="https://i.imgur.com/Ak9edlu.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/Ak9edluh.png"/></a></p><p>According to the game’s development bible, there’s some lore about an ancient civilisation named the Lemurians. These were the folk who built the Lost City and its pseudo-Oceania, pseudo-South American inspired architecture.</p><p>Apparently they built the teleporters you keep running across, and although the games never go into the idea hard, Lemurian artefacts keep cropping in Cortex’s collection.</p><p><a href="https://i.imgur.com/jqJ9Apg.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/jqJ9Apgh.png" /></a></p><p>Something I noticed in the world map! The Cortex Power stage actually has a little model of the sign you see in-game, with the R hanging off. Dorky little detail but I’d always missed it until now:</p><p><a href="https://i.imgur.com/xw1xKxx.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/xw1xKxxh.png"/></a></p><h2 id="Crash-2-Astral-Ambitions"><a href="#Crash-2-Astral-Ambitions" class="headerlink" title="Crash 2: Astral Ambitions"></a>Crash 2: Astral Ambitions</h2><p>The second game is where the upscaling really shines. Naughty Dog really invested in dynamic lighting and much more confident camera direction, dialog, all round polish.</p><p><a href="https://i.imgur.com/bfYOirL.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/bfYOirLh.png"/></a></p><p>A little detail I noticed - the master crystal sits on a plinth surrounded by numbers. Below each number is a slot for the crystals Crash is collecting. There’s also a lab assistant in the background (a kind of recurring meme for the series)</p><p><a href="https://i.imgur.com/W8Neztj.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/W8Neztjh.png"/></a></p><p>Crash 2 makes a few attempts to tie things back to the original islands and their Lemurian ruins.</p><p><a href="https://i.imgur.com/HJra1vD.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/HJra1vDh.png"/></a></p><p>Playing in high-res I noticed a lot more Lemurian architecture. Now I think about it, maybe one of the ideas in the background was that Cortex and co. had largely pilfered ancient tech as their own, including the warp pads.</p><p><a href="https://i.imgur.com/eX9QOEw.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/eX9QOEwh.png"/></a></p><p><a href="https://i.imgur.com/MjQQNq3.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/MjQQNq3h.png"/></a></p><h2 id="Crash-Bandicoot-3"><a href="#Crash-Bandicoot-3" class="headerlink" title="Crash Bandicoot 3"></a>Crash Bandicoot 3</h2><p>As you may remember, the story of Crash 3 is that Dr Neo Cortex and fellow evil-doers use time-travel to try and collect the crystals before the good guys were born. On the way, they install themselves as iron-fisted rulers of each time period, becoming Kings of the Medieval age or Emperors of Rome. I guess you’ve got to have a hobby.</p><p><a href="https://i.imgur.com/XTKo5Un.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/XTKo5Unh.png"/></a></p><p>Dr Neo Cortex = Dr Big Mood</p><p><a href="https://i.imgur.com/924vwMq.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/924vwMqh.png"/></a></p><p>Crash himself isn’t much more mentally stable this time around - although he does have a more detailed model</p><p><a href="https://i.imgur.com/LaF3XWV.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/LaF3XWVh.png"/></a></p><p>This game also introduces Dr Nefarious Tropy, inventor of the time-whatsit. <a href="https://www.youtube.com/watch?v=FdO8jObarxI" target="_blank" rel="noopener">His boss theme is absolutely wicked</a>! Check out the <a href="https://www.youtube.com/watch?v=OLSsZ8UZUGw" target="_blank" rel="noopener">N Sane version too</a>. Too bad he goes down so quick.</p><p><a href="https://i.imgur.com/8zyYa19.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/8zyYa19h.png"/></a></p><p>In the intro background we see a photo of Crash’s girlfriend Tawna and a promotional render from the original game’s marketing</p><p><a href="https://i.imgur.com/OVouuQO.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/OVouuQOh.png"/></a></p><p>Dingodile terrorises the local wildlife</p><p><a href="https://i.imgur.com/4GIAjbm.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/4GIAjbmh.png" /></a></p><p>Tiny Tiger (no relation to Tony) sets himself up as King in what appears to be Arthurian England. The locals do him the favour of decking out his castle with his own heraldry, complete with naff 12th-century style tiger drawing, which I’d never noticed until high-rezzed:</p><p><a href="https://i.imgur.com/ApDxIyW.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/ApDxIyWh.png"/></a></p><p>And this is the final battle. In widescreen you can see a lot more of that Lemurian architecture - a nice touch that ties the end of the trilogy to its origins, and perhaps implies something about where the time travel tech really came from</p><p><a href="https://i.imgur.com/vTa6h2u.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/vTa6h2uh.png"/></a></p><blockquote><p>Defeated again! This is not fair!  Maybe I should retire… to a nice, big beach, with a nice big drink.  And a woman, with nice, big… bags of ice for my head!</p></blockquote><p><a href="https://i.imgur.com/GMnps2L.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/GMnps2Lh.png" /></a></p><p>You can play Crash B with upscaled graphics for yourself by installing RetroArch and using the BeetleHW core. Set up internal GPU scaling and texture mapping correction and enjoy!      </p><p><a href="https://i.imgur.com/8BAvZy4.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/8BAvZy4h.png"/></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Modern emulator cores like BeetleHW allow you to play old-school PSOne games in new-school high resolution. Games that rely heavily on polygonal graphics, rather than textured graphics, benefit the most. And as a fan of the original &lt;em&gt;Crash Bandicoot&lt;/em&gt; games my eyes just popped to see them brought to vivid life on a 4k, widescreen display.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Right click any image + open in new tab for a full sized view. Or view the gallery on &lt;a href=&quot;https://imgur.com/gallery/pgGLvLq&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;imgur&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/Pw2JMiM.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://i.imgur.com/Pw2JMiMh.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Videogames" scheme="http://www.breck-mckye.com/tags/Videogames/"/>
    
      <category term="psone" scheme="http://www.breck-mckye.com/tags/psone/"/>
    
  </entry>
  
  <entry>
    <title>The real villain of Final Fantasy VIII is History Itself</title>
    <link href="http://www.breck-mckye.com/blog/2021/07/The-real-villain-of-Final-Fantasy-VIII-is-History-itself/"/>
    <id>http://www.breck-mckye.com/blog/2021/07/The-real-villain-of-Final-Fantasy-VIII-is-History-itself/</id>
    <published>2021-07-25T22:39:07.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2021/ff8.jpg" alt=""></p><p>Final Fantasy VIII is a curious one.</p><p>You play a group of teens at a high-school-cum-military academy who spend their days planning prom dates, riding hoverboards and munching hot dogs at the school cafeteria. They’re training to become elite special forces, but have no idea their school is really a front for a millennia-long war against a time-travelling sorceress who wants to destroy all existence.</p><p>It gets… strange. You are mortally wounded and impaled in the chest at the end of Disc 1, then awake apparently unharmed. Everyone grew up together in an orphanage but forgot due to Plot Convenient Amnesia (discussed once and then forgotten). You fight a T-Rex in the school gym.</p><p><img src="/images/2021/squall-wound.jpg" alt=""></p><p>VIII can be maddeningly vague. Just who is Ultimecia, the sorceress from the future, and what does she really want? It’s never satisfyingly explained, nor how the sorceresses came about. There seems to be a link between her and your love interest Rinoa - with tantalising clues and strange allusions - but it’s a lacuna, an absence, like so many elements of FFVIII’s lore. </p><p>But a recent replay changed my mind. In fact: I now think VIII is the smartest and most self aware of the whole series. It has its faults and some bad writing in parts, but I think there’s a way of looking at FFVIII that makes sense out of the game’s weirdness.</p><p>I think that if you look at FF8 as a story about stories - a metastory - a structure falls into place. Like the game’s own time travel loop, this structure is a paradox, collapsing and uncollapsing on itself indefinintely. VIII tells a story about stories so dangerous, it has to abandon its own story in disgust.</p><p>I want to show you the real strangeness of Final Fantasy VIII.</p><a id="more"></a><h2 id="The-argument"><a href="#The-argument" class="headerlink" title="The argument"></a>The argument</h2><p><img src="/images/2021/diablos.jpg" alt=""></p><p>Here’s the idea: Final Fantasy VIII is about many things, but at the center of it are people so obsessed with history and mythology, and making sense of time, that they lose all perspective of the present. The infinite perspective of seeing across history warps people: it makes them justify atrocities; it steals from them their humanity; it makes them sacrifice everything that makes them themselves.</p><p>Ultimecia is so traumatised by the grief of her ancestors that through time-travel she retroactively commits genocide. SeeD in response is so fearful of Ultimecia’s wrath that it throws thousands of teenagers’ lives at any Sorceress who emerges, brainwashing cadets with memory-destroying magic powers. The result, of course, is that they cause the very oppression Ultimecia comes back to avenge. Seifer meanwhile is so obsessed with myth and movies that he plays his own fictional character, and loses himself in the process.</p><p>But this puts the game in a quandary. FF games love to tell grand stories about the origins of their worlds. VII has its Lifestream and the Ancients; IX had Terra and Garland. FF Tactics has its elaborately architected story of religious charlatans, corrupt priests and supernatural horror. What do you do, though, when the gist of your story, is that Stories on that scale are themselves evil and dangerous?</p><p>I think what happens, is that the game gets so revolted at the misuse of history and myth, it decides to stop trying to explain itself. Stop trying to fill in Ultimecia and her origins. Stop trying to explain Hyne or the origins of the Sorceresses. Instead it just focuses on two kids, Squall and Rinoa, making their own future.</p><p>And I think that makes sense, within the game’s internal logic. Because I want to go over just <em>how much damage</em> history does in FF8.</p><h2 id="History-and-myth-in-FFVIII"><a href="#History-and-myth-in-FFVIII" class="headerlink" title="History and myth in FFVIII"></a>History and myth in FFVIII</h2><p>Something I need to clarify is that - in FF8 at least - history and mythology are just two facets of the same thing. You could say both attempt to reduce time to a single, simpler, meaning.</p><p>For those fighting against the Sorceress, History is nothing but an endless war against Her, which in objective terms means a succession of women who inherit supernatural powers and are willing to use them politically.</p><p>For those fighting with the Sorceress, history is nothing but a Witch and her faithful Knight battling against all odds, protecting the descendants of Hyne, the great creator-god. Even if the Witch must lose, there is tragic beauty in facing the world alone.</p><p>However, FF8 treats mythology <em>very</em> sceptically. Consider the first (playable) scene of the game:</p><p><img src="/images/2021/ff8-medbay.jpg" alt=""></p><p>Squall is recovering from his fight with Seifer and wakes up in a medical bay. Dr Kadowaki asks him to focus his eyes.</p><p>What’s striking is its realism. This is <em>Final Fantasy</em> after all. Squall isn’t healed with a Curaga spell or a Megalixir; it’s all very conventional medicine.</p><p>This scene tells us four things: FF8’s world is like our own; technology is modern but restrained; magic if it exists is severely limited; and healing is done by doctors - not shamen. We’re in a recognisably modern world, which puts us outside of mythology, and by definition, on the outside of history.</p><p>Beyond that, though, VIII is coy to provide details. You’re a mercenary and your job is to complete missions to the letter, not get involved in politics. You’re encouraged to keep the lore of the world, and the interpretation of its events, very distant.</p><h3 id="Myth-is-kept-at-arms’-length"><a href="#Myth-is-kept-at-arms’-length" class="headerlink" title="Myth is kept at arms’ length"></a>Myth is kept at arms’ length</h3><p>When mythology does come up it’s… hazy. Only occasionally do you find characters willing to bring up how they think the world was created.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Old Man to Grandchild (overheard):</span><br><span class="line"></span><br><span class="line">&quot;Long, long ago... When this world was just</span><br><span class="line">made, there was a strong god called &#39;Hyne&#39;.</span><br><span class="line">This god was very, very strong, but after</span><br><span class="line">fighting a lot of monsters, he became very</span><br><span class="line">tired. So he made &#39;people&#39; like you and me</span><br><span class="line">to do all the work, and the god went to</span><br><span class="line">sleep.</span><br><span class="line"></span><br><span class="line">However, the god was very surprised when he</span><br><span class="line">awoke. Surprised that there were so many</span><br><span class="line">people. Hyne decided to reduce the number</span><br><span class="line">of people by taking away the children.</span><br><span class="line"></span><br><span class="line">And so, the battle against Hyne began.&quot;</span><br></pre></td></tr></table></figure><p>The Hyne story has the ring of a myth that’s been translated too many times to be intelligible, cribbed from the real world mythology of Atra-Hasis written 4000 years ago.</p><p>There <em>are</em> “Guardian Forces”, that resemble beings from religion and myth, but they’re a motley pantheon with no obvious origin. Depending on what fan theories you subscribe to, GFs like Griever might even be memes come to life, rather than beings that ever <em>really</em> existed.</p><p><img src="/images/2021/griever.jpg" alt=""></p><p>By setting the game in the modern day and telling us to withhold our judgement, Final Fantasy VIII wants us to keep history and myth at arms’ length. Even when magic and monsters are introduced, it’s always behind a semi-scientific or sci-fi mechanic, like the Lunar Cry or electromagnetic radiation.</p><p>Perhaps it’s also why the focus of play is so much about stats and “junctioning” stats outside of battle, rather than performing superhuman feats in-battle: a game that’s sceptical of myth is just as sceptical of heroes, and underplays their power. Speaking of which -</p><h2 id="Seifer-is-the-discarded-hero-of-Final-Fantasy-VIII"><a href="#Seifer-is-the-discarded-hero-of-Final-Fantasy-VIII" class="headerlink" title="Seifer is the discarded hero of Final Fantasy VIII"></a>Seifer is the discarded hero of Final Fantasy VIII</h2><p>In Squall’s SeeD exam, your role is simple: follow a mission brief, don’t leave the assignment zone, don’t engage with civilians. You even get points docked from your exam result if you speak to NPCs. What the Dukedom of Dollet is, and what Galbadia want with their broadcast station, is none of our concern. We’re military subcontractors, not heroes.</p><p>Except… we _do_ have a hero on the team: Seifer Almasy. He tells us himself - and he seems to be the only person who gives a shit about what Galbadia are up to in Dollet.</p><p>Seifer carries the same weapon as Squall, with the same R1-for-bonus-damage gimmick. He has unique “limit break” conditions and his “posse” of Raijin and Fujin give him a party of three - just like your traditional Final Fantasy protagonist.</p><p><img src="/images/2021/seifer-hero.jpg" alt=""></p><p>But Seifer is punished <em>severely</em> for his heroism.</p><p>On return from Dollet, he’s the object of utter contempt from Quistis and Xu - because Seifer stepping above and beyond represents a loss of earnings for SeeD. They’d rather the Galbadians run riot and burn Dollet to the ground: it’s good for business.</p><p><img src="/images/2021/xu.jpg" alt=""></p><p>But Seifer is irrepressible: when he abducts President Deling in Timber, it’s because he’s outraged your team of three junior SeeDs were sent on a suicide mission:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Quistis:</span><br><span class="line">&quot;He was so angry when he found out it was</span><br><span class="line">only the 3 of you dispatched to Timber.</span><br><span class="line"></span><br><span class="line">&#39;What!? They might end up fightin&#39; the whole</span><br><span class="line">Galbadian force! And all they dispatch are 3</span><br><span class="line">rookie SeeD members!? Dammit! I&#39;m going to</span><br><span class="line">Timber!&#39;</span><br><span class="line"></span><br><span class="line">I never would have guessed he was serious</span><br><span class="line">about it.&quot;</span><br></pre></td></tr></table></figure><p>Seifer’s problem, though is that he’s too self aware. He’s theatrical, egotistical, completely obsessed with books and movies. He quotes the <em>Sorceress’ Knight</em> at length to Squall and he holds his gunblade <em>exactly</em> like Laguna does in the <em>Sorceress’ Knight</em> movie:</p><p><img src="/images/2021/gunblade.jpg" alt=""></p><p>Seifer’s fiction-obsession makes him live like a protagonist, fighting increasingly implausible odds. And boy, it costs him everything. Not just his humiliating defeats, but his values, his dignity, his selfhood.</p><p>On Disc 2 he taunts your party for fighting like monsters, a swarm of three against one. By Lunatic Pandora, though? He leaves any code of honour behind as he seizes Rinoa off-screen and sacrifices her to the monstrous Adel.</p><p>His grand, theatrical coat is by then worn and ragged; his slick-backed hair greasy and unkempt. Raijin and Fujin no longer recognise him. He’s become nothing, literally a Cipher in someone else’s story.</p><h2 id="Violence-begets-violence"><a href="#Violence-begets-violence" class="headerlink" title="Violence begets violence"></a>Violence begets violence</h2><p>One of the things that always bothered me about FFVIII was the void where its villain is. I was used to Final Fantasy games with grand, bombastic, larger than life villains like Kefka, Sephiroth or Kuja. Ultimecia by comparison has very little screen presence.</p><p>I counted, and excluding what she says through Edea, she only <em>directly</em> speaks about eight lines across the whole game. Yet she’s the ultimate cause of the entire Time Compression plot. Why she wants to do it is unclear, and what it even means to compress time, is a very abstract threat.</p><h3 id="Myth-becomes-history"><a href="#Myth-becomes-history" class="headerlink" title="Myth becomes history"></a>Myth becomes history</h3><p>Well, if we want to understand Ultimecia, we should start with what she says whilst controlling Sorceress Edea - these are her first lines in-game, if we include possessions:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Edea:</span><br><span class="line">&quot;...Lowlifes. ...Shameless filthy wretches.</span><br><span class="line">How you celebrate my ascension with such</span><br><span class="line">joy ... Hailing the very one you have</span><br><span class="line">condemned for generations. What happened</span><br><span class="line">to the evil, ruthless sorceress from your</span><br><span class="line">fantasies?&quot;</span><br><span class="line"></span><br><span class="line">President Deling:</span><br><span class="line">&quot;E-Edea... Are you alright...?&quot;</span><br><span class="line"></span><br><span class="line">Edea:</span><br><span class="line">&quot;This is reality. No one can help you.</span><br><span class="line">Sit back and enjoy the show.&quot;</span><br><span class="line"></span><br><span class="line">[The crowd cheers for Edea&#39;s speech;</span><br><span class="line">she tosses Deling aside.]</span><br><span class="line"></span><br><span class="line">Edea:</span><br><span class="line">&quot;Rest assured, you fools. Your time will</span><br><span class="line">come. This is only the beginning. Let us</span><br><span class="line">start a new reign of terror. I will let</span><br><span class="line">you live a fantasy beyond your imagination.&quot;</span><br></pre></td></tr></table></figure><p>You probably know already that Ultimecia is going back in time to enact revenge for the oppression she’s suffered across history. But take another look. She’s very focused on <em>fantasy and reality</em>: the <em>fantasy</em> of the evil sorceress; the <em>reality</em> that’s unfolding; the threat to <em>live</em> that fantasy after all.</p><p>Ultimecia is specifically punishing people for <em>mythology</em> by making their <em>myths real</em>. She turns statues of mythic monsters into living ones and lets them loose on the crowd.</p><p><img src="/images/2021/edea-statues.jpg" alt=""></p><p>It’s easy to read Ultimecia as a garden-variety megalomaniac, but I see her as a force of History. She lives to grieve the past, and even the parts of history that weren’t true, she’ll go back in time to <em>make real retrospectively</em>.</p><h3 id="History-becomes-myth"><a href="#History-becomes-myth" class="headerlink" title="History becomes myth"></a>History becomes myth</h3><p>Ultimecia is <em>obsessed</em> with history. Why does a woman 2000 years in the future live in a Renaissance-style castle, replete with sixteenth-century style portraiture? Even the castle soundtrack is a Baroque ensemble of organs and harpsicords, a pastiche of 17th century music:</p><iframe width="560" height="315" src="https://www.youtube.com/embed/CqtGBR80NWw" title="FF8: The Castle" frameborder="0"></iframe><p>Compressing time - making all moments be experienced at once - is just another facet of that. Because that’s essentially what History, when it runs out control, really <em>does</em>: by “over-matching” patterns across time, it “compresses” them into a simpler narrative. Everything becomes About The Time War, and nothing else has real meaning.</p><p>Once you become obsessed enough with a historical narrative, you’re living Time Compression already: experiencing the same meanings and emotions over and over. All joy becomes empty when you know only grief for the inevitable future; people and places just become interchangable soldiers on the forever battlefield. There’s no meaning to anything, just war.</p><p><img src="/images/2021/war.jpg" alt=""></p><p>Eventually Ultimecia’s grief becomes literal as she merges her body with a monstrous, man-eating being called <em>The Griever</em>. Once that’s destroyed, she reveals her real form, whose head is just an empty void cradling a brilliant golden light. To me it always resembled a solitary candle in the blackness, a symbol of memorial to everything Ultimecia has lost, the ultimate sum of what’s really inside her.</p><p><img src="/images/2021/ulti.jpg" alt=""></p><h2 id="Begets-violence-begets"><a href="#Begets-violence-begets" class="headerlink" title="Begets violence begets"></a>Begets violence begets</h2><p>Enough on Ulti. Let’s talk about SeeD for a moment. I think they’re <em>far</em> more morally grey than first appears.</p><p>Let’s review: to fight Ultimecia, Cid Kramer converted an orphanage into an elite paramilitary academy. He locates orphans, as well as displaced, vulnerable and “troubled” children, and he trains them up as soldiers, released into battle at age 15. To increase their power, he introduces these children to Guardian Forces. What he doesn’t disclose is that GFs demand a sacrifice for their power, by replacing memories in their hosts’ heads.</p><p>Children who grew up together greet one another as strangers. Garden guidelines discourage forming relationships. SeeDs don’t have friends, just colleagues, and they’re willing to fight former compatriots to the death if a contract demands it.</p><p><img src="/images/2021/seed-grey.jpg" alt=""></p><p>If you can’t remember anything, and you can never form friendships or relationships, only fight, I have to question - just how different is that existence <em>really</em> from Time Compression? If your life is endless battle against the Sorceress with no friends, no connections, and no personal history, are you really doing that much better than what Ultimecia has in store for you?</p><p>At the end of history, all that was left of Ultimecia’s was a glowing orb, a dying light of memory and grief. So what was left in Squall’s head after ten years of SeeD brainwashing and repression?</p><p><img src="/images/2021/squall-head.jpg" alt=""></p><p>And let’s not forget how many SeeDs - mostly teens - die in this millenia-long war against the Sorceress. FF8 has a high-school setting to remind you that <em>these people are kids</em>. They talk about love, exploration and romance, because they are young adults with a lifetime of possibility ahead of them. <em>These</em> are the people Cid Kramer sends on suicide missions against Galbadia, because legend has it that a trio of SeeDs eventually win. It’s horrific.</p><h3 id="Child-sacrifice-in-Final-Fantasy-games"><a href="#Child-sacrifice-in-Final-Fantasy-games" class="headerlink" title="Child sacrifice in Final Fantasy games"></a>Child sacrifice in Final Fantasy games</h3><p>There’s a bigger theme I want to strike at, that stretches across other Final Fantasies. I think a lot of FF games in the late-90s era use child (or teen) sacrifice as a shorthand for civilisations that are fundamentally sick.</p><p>IX was probably the most overt about this: Vivi Orienteur and the Black Mages are beings manufactured to die young. IX’s lore is about an ancient planet of infertile immortals, the Terrans, consuming the life energy of younger planets in a bid to keep their ancient civilisation alive.</p><p><img src="/images/2021/death.jpg" alt=""></p><p>X continues the idea with Summoners: teenagers who volunteer for a dangerous pilgrimage to fight a being called Sin - that they can only subdue by sacrificing their lives. This is a fraud, however, perpetuated by the elderly and undead priests of Yevon.</p><p>These games have societies that have stopped being able to replicate themselves, and are eating their own young to keep going. It’s grotesque and intuitively unsustainable.</p><p>In Final Fantasy VII the crisis is all-pervasive. The world is controlled by the dystopian Shinra Electric Company., whose reactors gobble up the very “lifestream” that’s required to conceive new life. </p><p>FFVII’s society is sacrificing the young as a literal power source. Everywhere we go in VII’s world, youths are leaving to go work in the city, whilst their villages slowly die. Shinra’s armed force SOLDIER recruits teenagers aged 14, and subjects many of these kids to human experimentation, with brutal results:</p><p><img src="/images/2021/makonoid.png" alt=""></p><p>In FFVIII, meanwhile, kids are chewed up by the war machine on both sides. SeeD seeks out vulnerable children to turn into young soldiers. Meanwhile Sorceresses like Adel scour the land kidnapping little girls who might make successors.</p><p>So I don’t think we can excuse how SeeD operates as just a bit of a plot contradiction, because the theme crops up so many times in FF to be less than deliberate. SeeD might be better than Ultimecia’s tyranny, but the sacrifices they make are on a similar level of atrocity - and end up triggering Ultimecia’s revenge anyway.</p><p>And it largely happens because Cid Kramer’s obsession with history that hasn’t even happened leads him to decide that the ends justify the means.</p><h2 id="Squall"><a href="#Squall" class="headerlink" title="Squall"></a>Squall</h2><p>Squall’s arc cuts through this endless cycle of revenge and war.</p><p>For Squall, becoming part of the past doesn’t mean becoming a legend, like it does for Seifer. It means losing control of your story and becoming part of someone else’s narrative - that’s what <em>really</em> freaks him out about death:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Zell:</span><br><span class="line">&quot;I didn&#39;t like [Seifer], but executed...?&quot;</span><br><span class="line"></span><br><span class="line">Squall:</span><br><span class="line">(I liked him... wasn&#39;t really a bad guy...</span><br><span class="line">He was one of us... Seifer... You&#39;ve become</span><br><span class="line">just a memory.)</span><br><span class="line"></span><br><span class="line">(Will they... Will they talk about me this</span><br><span class="line">way if I die, too? Squall was this and that.</span><br><span class="line">Using past tense, saying whatever they want?</span><br><span class="line">So this is what death is all about...)</span><br><span class="line"></span><br><span class="line">(...Not for me. I won&#39;t have it!!!)</span><br></pre></td></tr></table></figure><p><img src="/images/2021/squall-outburst.jpg" alt=""></p><p>As Squall grows through the story, his journey is to let go of his childhood trauma and embrace the possiblity of new friends and relationships. He stops caring about any narrative larger than that. Fighting Ultimecia is a faraway second to finding Rinoa:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Zell:</span><br><span class="line">&quot;So, Ultimecia wants to use Ellone&#39;s</span><br><span class="line">power, right?&quot;</span><br><span class="line"></span><br><span class="line">Zell:</span><br><span class="line">&quot;What&#39;s she going to do in the past?&quot;</span><br><span class="line"></span><br><span class="line">Squall:</span><br><span class="line">(You were looking at me... You smiled</span><br><span class="line">when our eyes met.)</span><br><span class="line"></span><br><span class="line">Edea:</span><br><span class="line">&quot;Time compression.&quot;</span><br><span class="line"></span><br><span class="line">Zell:</span><br><span class="line">&quot;Time compression?&quot;</span><br><span class="line"></span><br><span class="line">Squall:</span><br><span class="line">(It made me feel calm, tranquil.)</span><br><span class="line"></span><br><span class="line">Edea:</span><br><span class="line">&quot;It&#39;s time magic. Past, present, and</span><br><span class="line">future get compressed.&quot;</span><br><span class="line"></span><br><span class="line">Zell:</span><br><span class="line">&quot;What&#39;s going to happen to the world?</span><br><span class="line">Why do something like that?&quot;</span><br><span class="line"></span><br><span class="line">Squall:</span><br><span class="line">(Rinoa... Give me another chance.)</span><br></pre></td></tr></table></figure><p>Whilst the gang go on about All Elusive Time Kompression, Squall Lionheart couldn’t give a fig. He only knows one thing:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Squall:</span><br><span class="line">&quot;Pandora whatever and Sorceress Adel are</span><br><span class="line">out of my hands. I don&#39;t even know where</span><br><span class="line">to look for Sis. The only think I know is</span><br><span class="line">Rinoa. The only thing I want to do for</span><br><span class="line">sure right now is for Rinoa. We&#39;re going</span><br><span class="line">to get Rinoa back!&quot;</span><br></pre></td></tr></table></figure><p>In the end, Squall doesn’t care about the binary of Knights versus SeeDs. He’s indifferent to history and contemptuous of plot. Falling in love with Rinoa offers him a future that sits outside the endless Sorceress War.</p><h2 id="Abandoning-History-means-letting-go-of-Lore"><a href="#Abandoning-History-means-letting-go-of-Lore" class="headerlink" title="Abandoning History means letting go of Lore"></a>Abandoning History means letting go of Lore</h2><p>So the future Squall cares about - one with Rinoa - is a timeline that isn’t bound within the Ultimecia time loop: it’s not part of the present day nor the final battle of SeeD. It’s also completely outside the scope of the game’s plot -  this is an important idea, and we’ll come back to it.</p><p>Squall’s not the only one indifferent to the Sorceress War or even FF8 lore itself. Doctor Odine, VIII’s Einstein-figure and lore-explainer, positively can’t be bothered:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Doc Odine:</span><br><span class="line">&quot;Compressing time with magic... Vat good</span><br><span class="line">will it do for ze sorceress to compress</span><br><span class="line">time? There may be many reasons, but it</span><br><span class="line">doesn&#39;t matter. Let&#39;s just figure out</span><br><span class="line">vat Ultimecia is up to.</span><br></pre></td></tr></table></figure><p><img src="/images/2021/odine.jpg" alt=""></p><p>This is our one opportunity to learn the truth about what Ultimecia truly wants. <strong>And it doesn’t matter.</strong></p><p>I used to rage at this scene! How could Square leave this completely ambiguous? How could they refuse me the neat explanation that tied everything together, like I had in all the other FF games? With no explanation beyond power itself it just seemed like pointless nihilism.</p><p>Now I feel differently. Too many characters in Final Fantasy VIII want their equivalent of an Odine-brand explanation: A single sentence that summarises the history of the FF8 world, nice and pat. A single sentence that draws a battle line in an endless war between side A and side B. I did too.</p><p><strong>But getting that sentence, getting that explanation, <em>is</em> Time Compression. Reducing everything to a single experience, a single meaning. Nothing else meaningfully matters in that worldview. No space for love, hope, or anything outside endless war.</strong></p><p>Doing that is as nihilistic as anything Ultimecia does. <em>I am Ultimecia. Time shall compress… All existence denied</em>. Grief and grief alone motivates her to reduce all existence to her own unquenchable anger and loss, perpetuating itself over the centuries. If Squall had taken the SeeD Prophecy too seriously, he could have accidentally done the same.</p><p><strong>History is the real villain of Final Fantasy VIII and the game wants no part of it.</strong> Odine could have been written to fob us off with a simple explanation, about Ultimecia wanting absolute power or whatever. No. Instead he tells us that it truly isn’t important.</p><p>We should take him at his word. None of the lore about Hyne or Griever or the Guardian Forces goes anywhere - because the game wants us to <em>move onto a different story</em>.</p><h3 id="Re-watching-the-credits"><a href="#Re-watching-the-credits" class="headerlink" title="Re-watching the credits"></a>Re-watching the credits</h3><p>I want you to have another look at the final scenes of Final Fantasy VIII:</p><p><img src="/images/2021/camera.jpg" alt=""></p><p>It’s a camcorder movie, of all of Squall’s friends, celebrating in the Garden. Zell is munching his beloved hot dogs. Quistis is finally relaxed and happy. Selphie and Irvine are reconnecting after years split apart. Even Edea and Cid are remarried. Everyone is in good spirits, but where is Squall?</p><p>Rinoa turns to the camera, smiles, and it’s obvious: <strong>Squall’s behind the camera, filming a new story of his own.</strong></p><p><img src="/images/2021/end.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2021/ff8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Final Fantasy VIII is a curious one.&lt;/p&gt;
&lt;p&gt;You play a group of teens at a high-school-cum-military academy who spend their days planning prom dates, riding hoverboards and munching hot dogs at the school cafeteria. They’re training to become elite special forces, but have no idea their school is really a front for a millennia-long war against a time-travelling sorceress who wants to destroy all existence.&lt;/p&gt;
&lt;p&gt;It gets… strange. You are mortally wounded and impaled in the chest at the end of Disc 1, then awake apparently unharmed. Everyone grew up together in an orphanage but forgot due to Plot Convenient Amnesia (discussed once and then forgotten). You fight a T-Rex in the school gym.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2021/squall-wound.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;VIII can be maddeningly vague. Just who is Ultimecia, the sorceress from the future, and what does she really want? It’s never satisfyingly explained, nor how the sorceresses came about. There seems to be a link between her and your love interest Rinoa - with tantalising clues and strange allusions - but it’s a lacuna, an absence, like so many elements of FFVIII’s lore. &lt;/p&gt;
&lt;p&gt;But a recent replay changed my mind. In fact: I now think VIII is the smartest and most self aware of the whole series. It has its faults and some bad writing in parts, but I think there’s a way of looking at FFVIII that makes sense out of the game’s weirdness.&lt;/p&gt;
&lt;p&gt;I think that if you look at FF8 as a story about stories - a metastory - a structure falls into place. Like the game’s own time travel loop, this structure is a paradox, collapsing and uncollapsing on itself indefinintely. VIII tells a story about stories so dangerous, it has to abandon its own story in disgust.&lt;/p&gt;
&lt;p&gt;I want to show you the real strangeness of Final Fantasy VIII.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Videogames" scheme="http://www.breck-mckye.com/tags/Videogames/"/>
    
  </entry>
  
  <entry>
    <title>Time in the Time of Coronavirus</title>
    <link href="http://www.breck-mckye.com/blog/2020/11/time-in-the-time-of-coronavirus/"/>
    <id>http://www.breck-mckye.com/blog/2020/11/time-in-the-time-of-coronavirus/</id>
    <published>2020-11-16T12:00:00.000Z</published>
    <updated>2024-04-14T19:49:02.970Z</updated>
    
    <content type="html"><![CDATA[<p>COVID-19 has taken much from us, and one I feel keenly is my sense of time. It’s as though all our rituals are on hiatus.</p><p>Maybe not rituals like those of ancient humans - worshipping the arc of the sun, or the retreat of the winter frost - but even modern lives have an ebb and flow, are patterned in cycles. The beginning of September school term; the pre-Christmas drinks. The dry Januaries and the big spring cleans in March.</p><p>If premodern rituals let early humans gather in groups to celebrate the passage of time, fatten up on available foods and renew their relationships with each other, modern rituals serve a similar purpose. They bond us and help us make sense of the continuum of time. Their novelty and intensity makes them landmarks of our memory.</p><p>Rituals help turn time from an unbounded axis to an ordered cycle, punctuated with wine, family and song. Knowing a new year is beginning is a spur to action, to improve ourselves and remember the who we intend to be.</p><p>Observing time’s passing has its cutting edge, too: the season for suicide isn’t Christmas, but Spring. The idea of starting a whole new year can be too much for some of us. Chaucer sang of “April’s showers sweet”; TS Eliot called it the “cruellest month”. Both chose April as their day zero. Humans think and live in cycles of time.</p><p>But lockdown has put time on pause. It has hushed our parties and quenched our hearths. It has quietly devastated little family habits and quirks. Each one has its own. The big Easter Sunday lunch. The summer barbecue with all the friends you mean to see more often. Your son home from uni to help put up the Christmas tree, as he does every year. COVID has flattened out the fabric of time into an unceasing undifferentiated “present”.</p><p>COVID-time has no landmarks, and no celebrations of life or renewal. No weddings or kids’ birthdays, no house moves or new jobs. It is like a long run on sentence, without punctuation it has no resolutions except endings and no breaks except full stops.</p><p>We have lost time, but more fundamentally we have lost “time”. It’s not as painful a loss as the thousands of deaths, or the millions of lost jobs, the mounting debts and widespread fear for our loved ones. No-one could, no-one <em>would</em>, argue that. Nor is this any kind of anti-lockdown post. All I am writing is that time is one of several smaller losses, and insidious exactly because it so subtle.</p><p>I fear I can feel it already. With my friends, it gets harder every week to think of things to say, think of things to write. Self-isolation becomes the default, and it - disturbs me how comfortable I’m getting with my own company. What scares me is that we could come out of lockdown strangers to each other. We could come out of lockdown expecting a return to normality, when we still have all the hard work of learning to live together again, and the disappointment could be crushing.</p><p>In April I made a mistake. I pictured COVID-19 as a temporary problem with a definite end, sometime near Christmas. I put too many things off: staying in touch, learning new things, celebrating good news, getting back in shape - because I felt I had to “get through” COVID first.</p><p>Perhaps you did the same? It was folly though, even with a vaccine COVID isn’t going anywhere soon. The effort to get back on track, get the jabs distributed, get the shops back open, get people back to where they were - will be tremendous.</p><p>Let’s stop allowing Coronavirus to hold time hostage. Make time to make memories, and don’t be afraid to reach out. Send a friend a message asking if they want a phone call. Get a group video call going, go back to all the ideas we had in March and April. It will feel awkward, and if you’ve been alone as much as me this year it will probably feel uncomfortable.</p><p>Nevertheless. Humans need a sense of time: it helps us regulate ourselves emotionally, psychically and physically. It puts positive pressure on us to pursue the things we’d otherwise forget. It inspires us to renew ourselves and interrogate whether we are really living the life that meets our needs. Fight hard for a way to get some rituals back. I wish everyone the very best of luck.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;COVID-19 has taken much from us, and one I feel keenly is my sense of time. It’s as though all our rituals are on hiatus.&lt;/p&gt;
&lt;p&gt;Maybe no
      
    
    </summary>
    
    
    
      <category term="covid-19" scheme="http://www.breck-mckye.com/tags/covid-19/"/>
    
  </entry>
  
  <entry>
    <title>Playing TimeSplitters: Future Perfect on PC</title>
    <link href="http://www.breck-mckye.com/blog/2020/07/Playing-TimeSplitters-Future-Perfect-on-PC/"/>
    <id>http://www.breck-mckye.com/blog/2020/07/Playing-TimeSplitters-Future-Perfect-on-PC/</id>
    <published>2020-07-26T16:54:23.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>Like the <em>TimeSplitters</em> series? What if I told you it’s possible to play TimeSplitters 2 <em>and</em> Future Perfect on PC <em>with</em> mouse and keyboard support to boot? All you need is the Dolphin Gamecube emulator and a helpful controller plugin.</p><p><img src="/images/2020/ts3-1.png" alt=""></p><a id="more"></a><h2 id="Get-Dolphin"><a href="#Get-Dolphin" class="headerlink" title="Get Dolphin"></a>Get Dolphin</h2><p>First, you’re going to need an emulator. <a href="https://dolphin-emu.org/" target="_blank" rel="noopener">Dolphin</a> is a reliable, fast, well-supported GameCube and Wii emulator with support for PC, Mac and Linux. You will need to use the Windows build to get mouse and keyboard support (as far as I know), but if you’re on another platform you can still play with a joypad.</p><p>I used version 5.0 to play the game and was fine.</p><h2 id="Get-the-game"><a href="#Get-the-game" class="headerlink" title="Get the game"></a>Get the game</h2><p>Dolphin isn’t able to play GC games straight off of disk, so you’ll need an ISO of a disk backup. Obviously, I can’t provide you one, but I can tell you that you can use a Wii to extract a backup image. Alternatively… I suppose you could search the internet for an ISO. Not that I would condone such a thing, of course.</p><h2 id="Get-the-mouse-injector"><a href="#Get-the-mouse-injector" class="headerlink" title="Get the mouse injector"></a>Get the mouse injector</h2><p>The mouse injector is a Windows program that intercepts your mouse position and your running Dolphin instance and translates inputs from one to the other.</p><p>You can download the mouse injector <a href="https://github.com/jbreckmckye/jbreckmckye.github.io/raw/master/downloads/dolphin-5.0-11990-mouse-injector.7z" target="_blank" rel="noopener">here</a>.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Unzip the folder and copy the contents into your Dolphin installation folder. You’ll notice it overrides the <code>Dolphin.exe</code> file - this is needed so the injector can discover your game.</p><p>Open Dolphin and go to the controller settings - be sure to set the controller profile to <code>TimeSplitters</code>.</p><h2 id="Get-playing"><a href="#Get-playing" class="headerlink" title="Get playing"></a>Get playing</h2><p>To make the mouse injector work you have to follow a few steps in order. Don’t worry, it’s not too complicated:</p><ol><li>Start the <code>Dolphin.exe</code> you’ve just copied into the Dolphin folder</li><li>Start the game from your ISO</li><li>At the TS2 / TS3 startup screen, load the existing profile called <code>Player</code></li><li>Run <code>MouseInjector.exe</code>. It should detect the running <code>Dolphin.exe</code></li><li>Use the 4 key on your keyboard to switch on mouse input. This will lock your pointer (on your desktop) until you hit 4 again.</li><li>Get blasting!</li></ol><p><img src="/images/2020/ts3-2.png" alt=""></p><h2 id="Limitations-amp-Troubleshooting"><a href="#Limitations-amp-Troubleshooting" class="headerlink" title="Limitations &amp; Troubleshooting"></a>Limitations &amp; Troubleshooting</h2><p>The MouseInjector works pretty well, but there are a couple of moments you might get stuck, at least in Future Perfect</p><ol><li>On the level <code>Khallos Express</code> (the train level with Harry Tipper), you can’t defuse the bomb with the default mouse and keyboard controls. Instead you need to:<ol><li>Save a state</li><li>Switch off the Mouse Injector</li><li>Switch back to the default controller profile in Dolphin</li><li>In TimeSplitters, go back to the default controller setup</li><li>Solve the puzzle with the default keymappings for Dolphin</li><li>Put the TS controller setup back</li><li>Put the Dolphin controller profile back</li><li>Re-enable Mouse Injector</li></ol></li><li>During the level <code>Machine Wars</code> (set in the future, with R-110), during the section where you have to control the tank’s cannon, you can’t move the aim up and down. You can still beat the section, you just have to be exact with your timings and hit the spacecraft as they fly straight overhead. It is annoying though.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Like the &lt;em&gt;TimeSplitters&lt;/em&gt; series? What if I told you it’s possible to play TimeSplitters 2 &lt;em&gt;and&lt;/em&gt; Future Perfect on PC &lt;em&gt;with&lt;/em&gt; mouse and keyboard support to boot? All you need is the Dolphin Gamecube emulator and a helpful controller plugin.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020/ts3-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Videogames" scheme="http://www.breck-mckye.com/tags/Videogames/"/>
    
  </entry>
  
  <entry>
    <title>Setting up a static site and personal email - without paying for hosting</title>
    <link href="http://www.breck-mckye.com/blog/2020/05/Setting-up-a-static-site-and-personal-email-without-paying-for-hosting/"/>
    <id>http://www.breck-mckye.com/blog/2020/05/Setting-up-a-static-site-and-personal-email-without-paying-for-hosting/</id>
    <published>2020-05-22T11:22:51.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve recently moved this site and my personal email domain handling off a paid webhost. Now, everything is handled by Github Pages, Google Domains and Gmail, and the only thing I pay for is the DNS registration. Here’s a brief guide on how you can set this up yourself.</p><a id="more"></a><h2 id="Step-1-move-your-site-to-Github-pages"><a href="#Step-1-move-your-site-to-Github-pages" class="headerlink" title="Step 1: move your site to Github pages"></a>Step 1: move your site to Github pages</h2><ul><li>Create a Github repository named <code>[username].github.io</code>. Github will serve whatever content is on master under that URL.</li><li>Create a <code>src</code> branch - this will contain the source content of your static site</li><li>Sign up for a TravisCI free account</li><li>Add a <code>.travis.yml</code> file to the root of <code>src</code> and configure your build (details below)</li><li>Go to Travis and give it access to your new repository</li><li>Create a personal access token with the <code>repo</code> scope and note the value</li><li>Go to the Travis build settings for <code>[username].github.io</code> and add an environment variable for <code>GH_TOKEN</code> equal to the access token</li><li>Travis should now be able to build from <code>src</code> and output the result to <code>master</code></li></ul><h3 id="Configuration-files"><a href="#Configuration-files" class="headerlink" title="Configuration files:"></a>Configuration files:</h3><p>The <code>.travis.yml</code> file is needed to configure CI:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">src</span> <span class="comment"># build from src branch</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./build.sh</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">./build.sh</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">  skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line"><span class="attr">  keep-history:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  target_branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  fqdn:</span> <span class="comment"># enter your domain here</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">src</span></span><br><span class="line"><span class="attr">  local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p>(The <code>fqdn</code> property is needed so that master will contain a <code>CNAME</code> file, needed to resolve your Github pages site for a custom domain)</p><p>The <code>build.sh</code> script will need to be written for whatever static site generator you use. In my case I’m using Hexo with a theme I’ve shared on Github:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mkdir themes</span><br><span class="line">git clone https://github.com/jbreckmckye/hexo-theme-octo.git themes/octo</span><br><span class="line">cp _config.theme.yml ./themes/octo/_config.yml</span><br><span class="line"></span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h3 id="Checking-it-has-all-worked"><a href="#Checking-it-has-all-worked" class="headerlink" title="Checking it has all worked"></a>Checking it has all worked</h3><ul><li>Make sure the Travis build is passing</li><li>Verify content is being written to <code>master</code> with an <code>index.html</code> and a <code>CNAME</code> file at root</li><li>Navigate to <code>[your-username].github.io</code> and see your lovely content</li></ul><h2 id="Step-2-Set-up-Google-Domains"><a href="#Step-2-Set-up-Google-Domains" class="headerlink" title="Step 2: Set up Google Domains"></a>Step 2: Set up Google Domains</h2><p>Google Domains is fairly cheap (a dotcom address is about £10 a year) and highly convenient, but most importantly, it lets you forward emails for a custom domain to Gmail without paying for GSuite. If you want to use another domain registrar, you’ll probably have to sort out an alternative webmail provider.</p><p>Signing up to Google Domains is very quick though - the only holdup will be if you’re transferring an existing domain, in which case you’ll need to jump through a couple of hoops handing over an EPP code and (typically) replying to some emails from your old registar.</p><p>Once done, Google Domains provides a UI for managing email forwarding via your custom domain to any email your choose. You don’t even have to write any MX records.<br>At this point, you should be able to send an email to e.g. <a href="mailto:`me@yourcooldomain.com">`me@yourcooldomain.com</a>` and have it land in your Gmail inbox.</p><h2 id="Step-3-Set-up-replying-from-gmail"><a href="#Step-3-Set-up-replying-from-gmail" class="headerlink" title="Step 3: Set up replying from gmail"></a>Step 3: Set up replying from gmail</h2><p>So you can receive emails to your custom address, but how do you reply with the same address? You need to set up Gmail aliases.</p><p>Rather helpfully, Google have written a <a href="https://support.google.com/domains/answer/9437157?hl=en-GB" target="_blank" rel="noopener">guide to do just that</a>. You will need to have 2FA enabled on your account.</p><h2 id="Step-4-Pointing-your-domain-at-Github-Pages"><a href="#Step-4-Pointing-your-domain-at-Github-Pages" class="headerlink" title="Step 4: Pointing your domain at Github Pages"></a>Step 4: Pointing your domain at Github Pages</h2><p>Head to Google Domains / your domain registrar and get ready to write some DNS entries. We’ll need two:</p><ol><li>An <code>A</code> record for name <code>@</code> (meaning: the current domain) pointing to these IP addresses:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><ol start="2"><li>A <code>CNAME</code> record for name <code>www</code> (your subdomain) pointing to <code>[your-username].github.io.</code> (note the dot at the end)</li></ol><p>Save the changes, wait a short while, and check the DNS entries are resolving correctly by clearing your DNS cache (Google how to do this for your OS) and using <code>dig</code> (*nix) or <code>nslookup</code> (Windows) to check the IP resolution for your domain.</p><p>Sometimes DNS propagation can take a while - if it’s been more than an hour and things still don’t seem right, try a tool like <a href="https://www.whatsmydns.net/" target="_blank" rel="noopener">https://www.whatsmydns.net/</a> that will make DNS lookups on your behalf using servers across the globe. It’s highly possible things are still being cached on your end.</p><p>Once this clears everything should be sorted - you’ll be able to see your static website at <code>www.mycooldomain.com</code> and send/receive emails from your custom domain too. Publishing to your blog is just a matter of pushing content to your <code>src</code> branch - TravisCI will pick up and deploy changes automatically. And the only thing to pay for is the domain itself.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve recently moved this site and my personal email domain handling off a paid webhost. Now, everything is handled by Github Pages, Google Domains and Gmail, and the only thing I pay for is the DNS registration. Here’s a brief guide on how you can set this up yourself.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Modern JavaScript features you may have missed</title>
    <link href="http://www.breck-mckye.com/blog/2019/10/modern-javascript-features-you-may-have-missed/"/>
    <id>http://www.breck-mckye.com/blog/2019/10/modern-javascript-features-you-may-have-missed/</id>
    <published>2019-10-26T12:17:23.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>Despite writing JavaScript almost every working day for the past seven years, I have to admit I don’t actually pay that much attention to ES language announcements. Major features like <code>async/await</code> and <code>Proxies</code> are one thing, but every year there’s a steady stream of small, incremental improvements that go under the radar for me, as there’s always something bigger to learn.</p><p>So in this post, I’ve collected some modern JS features that didn’t get much airtime when they first came out. Some of these are just quality of life improvements, but others are genuinely handy and can save whole swathes of code. Here are a few you might have missed:</p><a id="more"></a><h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h2><h3 id="Binary-and-octal-literals"><a href="#Binary-and-octal-literals" class="headerlink" title="Binary and octal literals"></a>Binary and octal literals</h3><p>Binary manipulation isn’t something one has to do very often in JavaScript, but every so often a problem rolls around that just can’t be feasibly solved otherwise. You might be writing high perf code for lower power devices, squeezing bits into local storage, doing pixel RGB manipulation in the browser, or having to work on tightly packed binary data formats.</p><p>This can mean lots of work masking / merging binary numbers, which I’ve always felt is needlessly obscured  in decimal. Well, ES6 added a binary literal number format just for this purpose: <code>0b</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> binaryZero = <span class="number">0b0</span>;</span><br><span class="line"><span class="keyword">const</span> binaryOne  = <span class="number">0b1</span>;</span><br><span class="line"><span class="keyword">const</span> binary255  = <span class="number">0b11111111</span>;</span><br><span class="line"><span class="keyword">const</span> binaryLong = <span class="number">0b111101011101101</span>;</span><br></pre></td></tr></table></figure><p>This makes binary flags really easy:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pizza toppings</span></span><br><span class="line"><span class="keyword">const</span> olives    = <span class="number">0b0001</span>;</span><br><span class="line"><span class="keyword">const</span> ham       = <span class="number">0b0010</span>;</span><br><span class="line"><span class="keyword">const</span> pineapple = <span class="number">0b0100</span>;</span><br><span class="line"><span class="keyword">const</span> artechoke = <span class="number">0b1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pizza_ham_pineapple = pineapple | ham;</span><br><span class="line"><span class="keyword">const</span> pizza_four_seasons  = olives | ham | artechoke;</span><br></pre></td></tr></table></figure><p>Likewise for octal numbers. These are a bit niche in the JS world, but they’re quite common in networking and certain file formats. You can now write an octal with the syntax <code>0o</code> .</p><h3 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN()"></a>Number.isNaN()</h3><p>Not to be confused with <code>window.isNaN()</code>, this is a new method with much more intuitive behaviour.</p><p>You see, the classic <code>isNaN</code> has some interesting quirks:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>)              === <span class="literal">true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">null</span>)             === <span class="literal">false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>)        === <span class="literal">true</span></span><br><span class="line"><span class="built_in">isNaN</span>(&#123;&#125;)               === <span class="literal">true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">'0/0'</span>)            === <span class="literal">true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">'hello'</span>)          === <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>What gives? Bar the first, none of those parameters are actually <code>NaN</code>. The problem, as usual, is everyone’s “favourite” JavaScript feature: type coercion. Arguments to <code>window.isNaN</code> are coerced to numbers via the <code>Number</code> function.</p><p>Well, the new <code>Number.isNaN()</code> static method solves all that. It returns, definitively, once and for all, the equality of the argument you give it and <code>NaN</code>. It is utterly unambiguous:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)       === <span class="literal">true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">null</span>)      === <span class="literal">false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">undefined</span>) === <span class="literal">false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(&#123;&#125;)        === <span class="literal">false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'0/0'</span>)     === <span class="literal">false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'hello'</span>)   === <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><em>Signature:</em> <code>Number.isNaN : (value: any) =&gt; boolean</code></p><h2 id="ES2016"><a href="#ES2016" class="headerlink" title="ES2016"></a>ES2016</h2><h3 id="Exponent-power-operator"><a href="#Exponent-power-operator" class="headerlink" title="Exponent (power) operator"></a>Exponent (power) operator</h3><p>This crops up now and again, so it’s nice to have a literal syntax for powers:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>**<span class="number">2</span> === <span class="number">4</span></span><br><span class="line"><span class="number">3</span>**<span class="number">2</span> === <span class="number">9</span></span><br><span class="line"><span class="number">3</span>**<span class="number">3</span> === <span class="number">27</span></span><br></pre></td></tr></table></figure><p>(It’s weird because I was <em>convinced</em> JavaScript already had this - I may have been thinking of Python)</p><h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h3><p>This one was a little hard to miss, but if you’ve been spending the last three years writing <code>array.indexOf(x) !== -1</code>, rejoice in the new <code>includes</code> method:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)    === <span class="literal">true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="literal">true</span>) === <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>includes</code> uses the <a href="https://www.ecma-international.org/ecma-262/7.0/#sec-samevaluezero" target="_blank" rel="noopener">Same Value Zero Algorithm</a>, which is almost identical to the strict equality (<code>===</code>) check, except that it can handle <code>NaN</code> values. Like an equality check it will compare objects by reference rather than contents:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> object2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [object1, <span class="number">78</span>, <span class="literal">NaN</span>];</span><br><span class="line"></span><br><span class="line">array.includes(object1) === <span class="literal">true</span></span><br><span class="line">array.includes(object2) === <span class="literal">false</span></span><br><span class="line">array.includes(<span class="literal">NaN</span>)     === <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>includes</code> can take a second parameter, <code>fromIndex</code>, which lets you provide an offset:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// positions   0  1  2  3  4</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">array.includes(<span class="number">1</span>, <span class="number">2</span>) === <span class="literal">true</span></span><br><span class="line">array.includes(<span class="number">1</span>, <span class="number">3</span>) === <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Handy.</p><p><em>Signature:</em> <code>Array.prototype.includes : (match: any, offset?: Int) =&gt; boolean</code></p><h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><h3 id="Shared-Array-Buffers-amp-Atomics"><a href="#Shared-Array-Buffers-amp-Atomics" class="headerlink" title="Shared Array Buffers &amp; Atomics"></a>Shared Array Buffers &amp; Atomics</h3><p>This is a great pair of features that may prove invaluable if you’re doing a lot of work with web workers. They allow you to directly share memory between processes, and set up locks to avoid race conditions.</p><p>They’re both quite major features with fairly complex APIs, so there isn’t space to give them an overview here, but take a look at this <a href="https://www.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/" target="_blank" rel="noopener">Sitepen article</a> to learn more. Browser support is still spotty but should hopefully improve over the next couple of years.</p><h2 id="ES2018"><a href="#ES2018" class="headerlink" title="ES2018"></a>ES2018</h2><h3 id="Regex-bonanza"><a href="#Regex-bonanza" class="headerlink" title="Regex bonanza"></a>Regex bonanza</h3><p>ES2018 introduced a whole flurry of regular expression features:</p><h4 id="Lookbehind-matches-match-on-previous-chars"><a href="#Lookbehind-matches-match-on-previous-chars" class="headerlink" title="Lookbehind matches (match on previous chars)"></a>Lookbehind matches (match on previous chars)</h4><p>In runtimes that support it, you can now write a regex that looks for characters <em>before</em> your match. For example, to find all numbers prepended by a dollar:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(?&lt;=\$)\d+/</span>;</span><br><span class="line"><span class="keyword">const</span> text  = <span class="string">'This cost $400'</span>;</span><br><span class="line">text.match(regex) === [<span class="string">'400'</span>]</span><br></pre></td></tr></table></figure><p>The key is the new lookbehind group, evil twin to lookahead groups:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Look ahead:  (?&#x3D;abc)</span><br><span class="line">Look behind: (?&lt;&#x3D;abc)</span><br><span class="line"></span><br><span class="line">Look ahead negative:  (?!abc)</span><br><span class="line">Look behind negative: (?&lt;!abc)</span><br></pre></td></tr></table></figure><p>Unfortunately there isn’t presently any way to transpile the new lookbehind syntax for older browsers, so you may be stuck to just using this on Node for the time being.</p><h4 id="You-can-name-capture-groups"><a href="#You-can-name-capture-groups" class="headerlink" title="You can name capture groups"></a>You can name capture groups</h4><p>A really powerful feature of regex is the ability to pick out sub-matches and use them to do some simple parsing. But until recently we could only refer to sub-matches by number, e.g.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getNameParts  = <span class="regexp">/(\w+)\s+(\w+)/g</span>;</span><br><span class="line"><span class="keyword">const</span> name          = <span class="string">"Weyland Smithers"</span>;</span><br><span class="line"><span class="keyword">const</span> subMatches    = getNameParts.exec(name);</span><br><span class="line"></span><br><span class="line">subMatches[<span class="number">1</span>]     === <span class="string">'Weyland'</span></span><br><span class="line">subMatches[<span class="number">2</span>]     === <span class="string">'Smithers'</span></span><br></pre></td></tr></table></figure><p>But there’s now a syntax to assign these sub-matches (or capture groups) names, by putting <code>?&lt;title&gt;</code> at the beginning of the parens for each group you want to name:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getNameParts  = <span class="regexp">/(?&lt;first&gt;\w+)\s(?&lt;last&gt;\w+)/g</span>;</span><br><span class="line"><span class="keyword">const</span> name          = <span class="string">"Weyland Smithers"</span>;</span><br><span class="line"><span class="keyword">const</span> subMatches    = getNameParts.exec(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;first, last&#125; = subMatches.groups</span><br><span class="line">first             === <span class="string">'Weyland'</span></span><br><span class="line">last              === <span class="string">'Smithers'</span></span><br></pre></td></tr></table></figure><p>Unfortunately this is Chrome- and Node-only for the moment.</p><h4 id="Dots-can-now-match-newlines"><a href="#Dots-can-now-match-newlines" class="headerlink" title="Dots can now match newlines"></a>Dots can now match newlines</h4><p>You just have to provide the <code>/s</code> flag, e.g. <code>/someRegex./s</code>, <code>/anotherRegex./sg</code>.</p><h2 id="ES2019"><a href="#ES2019" class="headerlink" title="ES2019"></a>ES2019</h2><h3 id="Array-prototype-flat-amp-flatMap"><a href="#Array-prototype-flat-amp-flatMap" class="headerlink" title="Array.prototype.flat() &amp; flatMap()"></a>Array.prototype.flat() &amp; flatMap()</h3><p>I was so pleased to see these on MDN.</p><p><code>flat()</code>, very simply, flattens a multi-dimensional array by a specified maximum <code>depth</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multiDimensional = [</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>,[<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">multiDimensional.flat(<span class="number">2</span>) === [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p><code>flatMap</code> is essentially a <code>map</code> followed by a <code>flat</code> of depth 1. It’s handy when a mapping function returns an array but you don’t want the result to be a nested data structure:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> texts = [<span class="string">"Hello,"</span>, <span class="string">"today I"</span>, <span class="string">"will"</span>, <span class="string">"use FlatMap"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// with a plain map</span></span><br><span class="line"><span class="keyword">const</span> mapped = texts.map(<span class="function"><span class="params">text</span> =&gt;</span> text.split(<span class="string">' '</span>));</span><br><span class="line">mapped === [<span class="string">'Hello'</span>, [<span class="string">'today'</span>, <span class="string">'I'</span>], <span class="string">'will'</span>, [<span class="string">'use'</span>, <span class="string">'FlatMap'</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// with flatmap</span></span><br><span class="line"><span class="keyword">const</span> flatMapped = texts.flatMap(<span class="function"><span class="params">text</span> =&gt;</span> text.split(<span class="string">' '</span>));</span><br><span class="line">flatMapped === [<span class="string">'Hello'</span>, <span class="string">'today'</span>, <span class="string">'I'</span>, <span class="string">'will'</span>, <span class="string">'use'</span>, <span class="string">'FlatMap'</span>];</span><br></pre></td></tr></table></figure><h3 id="Unbound-catches"><a href="#Unbound-catches" class="headerlink" title="Unbound catches"></a>Unbound catches</h3><p>You can now write try/catch statements without binding the thrown error:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// something throws</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="comment">// don't have to do catch(e)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Incidentally, catches where you don’t care about the value of <code>e</code> are sometimes termed <em>Pokémon exception handling</em>. ‘Cos you gotta catch ‘em all!</p><h3 id="String-trim-methods"><a href="#String-trim-methods" class="headerlink" title="String trim methods"></a>String trim methods</h3><p>Pretty minor but a nicety:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> padded         = <span class="string">'          Hello world   '</span>;</span><br><span class="line">padded.trimStart() === <span class="string">'Hello world   '</span>;</span><br><span class="line">padded.trimEnd()   === <span class="string">'          Hello world'</span>;</span><br></pre></td></tr></table></figure><h2 id="Next-time…"><a href="#Next-time…" class="headerlink" title="Next time…"></a>Next time…</h2><p>If you liked this post, <a href="https://twitter.com/jbreckmckye" target="_blank" rel="noopener">let me know</a> and I might find the time to write up something similar for TypeScript!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Despite writing JavaScript almost every working day for the past seven years, I have to admit I don’t actually pay that much attention to ES language announcements. Major features like &lt;code&gt;async/await&lt;/code&gt; and &lt;code&gt;Proxies&lt;/code&gt; are one thing, but every year there’s a steady stream of small, incremental improvements that go under the radar for me, as there’s always something bigger to learn.&lt;/p&gt;
&lt;p&gt;So in this post, I’ve collected some modern JS features that didn’t get much airtime when they first came out. Some of these are just quality of life improvements, but others are genuinely handy and can save whole swathes of code. Here are a few you might have missed:&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://www.breck-mckye.com/tags/JavaScript/"/>
    
      <category term="software engineering" scheme="http://www.breck-mckye.com/tags/software-engineering/"/>
    
  </entry>
  
  <entry>
    <title>What challenges are facing the Ministry for Housing, Communities &amp; Local Government?</title>
    <link href="http://www.breck-mckye.com/blog/2018/08/What-challenges-are-facing-the-Ministry-for-Housing-Communities-Local-Government/"/>
    <id>http://www.breck-mckye.com/blog/2018/08/What-challenges-are-facing-the-Ministry-for-Housing-Communities-Local-Government/</id>
    <published>2018-08-29T22:35:03.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>“Housing” is now the first word in the department’s titular remit, and housing forms perhaps its most pressing priorities: responding effectively to the Grenfell tragedy, and improving access to the housing market.</p><p>On the first: DHCLG must implement recommendations of the Hackitt Review, including a more effective ‘outcomes-based’ building safety regulations framework, with clearer terms and responsibilities. It must move swiftly to identify risks in existing high-rises, and cooperate fully with the Grenfell Tower Public Inquiry.</p><p>On the second: the department must explore ways to stimulate further housebuilding. It could open up opportunities for SMEs and housing associations to build more homes. It could consider helping organisations raise more capital to invest in this. It could focus on ensuring planning-consented sites are built out faster. Above all it must do so without losing sight of housing quality.</p><p>But new builds alone can help no-one sitting empty. DHCLG should investigate ways to improve the efficiency and cost of the home-buying process, and give private renters more clarity over fees.</p><p>At a communities level, DHCLG has ongoing but important work to do developing an Integrated Communities Strategy, encouraging social mixing. Given patchy evidence for the benefit of previous interventions, it should establish meaningful measurements to help track the impact of individual pilot policies and build an evidence-based ‘toolbox’ of approaches that work.</p><p>Finally: Brexit. DHCLG must work quickly to establish a UK Shared Prosperity Fund that will cover the shortfall in local authority EU funding.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“Housing” is now the first word in the department’s titular remit, and housing forms perhaps its most pressing priorities: responding eff
      
    
    </summary>
    
    
    
      <category term="policy-and-government" scheme="http://www.breck-mckye.com/tags/policy-and-government/"/>
    
  </entry>
  
  <entry>
    <title>Parcel.js aims to make web development simple again</title>
    <link href="http://www.breck-mckye.com/blog/2018/06/Parcel-js-aims-to-make-web-development-simple-again/"/>
    <id>http://www.breck-mckye.com/blog/2018/06/Parcel-js-aims-to-make-web-development-simple-again/</id>
    <published>2018-06-10T20:30:29.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>In the beginning, there was HTML, and the tag was <code>&lt;script type=&#39;application/javascript&#39;&gt;</code>. With this little incantation a website author - or ‘webmaster’ - had the power to launch his or her visitors on a fantastic journey to infoscapes hewn from pure imagination. Exhilarating games, virtual shopping malls, columns of animated flames and those little visitor counters you never see any more. All powered by the humble <code>&lt;script&gt;</code> tag.</p><p>OK, so the web of the 1990s and early 2000s wasn’t terribly elegant. But it <em>was</em> very easy to develop websites. All you had to do was plop some files on an Apache server and point a bit of XML at the appropriate resource. There was no notion of modules, or bundling, or minification, or code splitting. No Gulp or Grunt or Webpack or Broccoli. Just plain old HTML.</p><p>What if I told you there was a way to make webdev simple again?</p><a id="more"></a><p><img src="/images/2018/parcel.png" alt=""></p><p>Parcel.js is a web application bundler, a replacement to the likes of Webpack and Rollup. You give it a HTML file (or JavaScript file, if you prefer), it reasons about all the assets you need, and it outputs them all in a single, specified folder. Where Parcel differs from Webpack is that it requires no configuration whatsoever: no finangling to consume different assets or choose your sourcemap ‘strategy’. Parcel just infers it from your code.</p><p>At a time of rapid churn and constant change in the JavaScript world, replacing something as fundamental as Webpack might seem like technological arson. But we cannot solve our present problems by doubling down on yesterday’s tools. They are, at least partly, responsible for the issues we face. Webpack’s plugin-based architecture means managing an enormous list of <code>devDependencies</code>, each one prone to change and obsolescence every time the wind turns.</p><blockquote><p>Is my career as a Webpack whisperer at an end?<br>(cries tears of joy) </p><footer><strong>conatus</strong> <cite>HackerNews</cite></footer></blockquote><p>In comparison, Parcel simply infers as much as possible from the semantics of your HTML, CSS and JavaScript itself. Need a second HTML file? Use a hyperlink! Need content for an iframe? Set its <code>src</code>. Want code splitting? Use the official ES6 dynamic import syntax and everything just works.</p><p>Of course, modern web applications rely on much more exotic technologies than 2002 Geocities pages, and Parcel has you covered. It can consume TypeScript files, React templates and Vuefiles out of the box. It can handle your usual range of CSS preprocessors and the production build (passing a CLI flag) will minify, optimise and MD5-version-stamp your assets utterly without fuss.</p><p>Should you ever need extra functionality - and in my experience so far, it’s been rare - just add a plugin to your <code>package.json</code>. Parcel will sniff it out and call it automatically. (Why can’t other things be this simple?)</p><p>It’s also very quick - almost an order of magnitude faster than Webpack 3.x builds, by my count - which is doubly remarkable: one, that builds taking thirty seconds now take three; and two, that this is somehow the least interesting of all Parcel’s features.</p><p>It is not perfect. The bundler is very new and has a few beta-ish bugs; the documentation is sparse and so far tree-shaking is not supported (though is on the project radar). Nevertheless. Working with Parcel in three commercial projects has been an absolute joy, and has now become my go-to default for new projects. <a href="https://parceljs.org/" target="_blank" rel="noopener">Try it sometime</a>!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the beginning, there was HTML, and the tag was &lt;code&gt;&amp;lt;script type=&amp;#39;application/javascript&amp;#39;&amp;gt;&lt;/code&gt;. With this little incantation a website author - or ‘webmaster’ - had the power to launch his or her visitors on a fantastic journey to infoscapes hewn from pure imagination. Exhilarating games, virtual shopping malls, columns of animated flames and those little visitor counters you never see any more. All powered by the humble &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;OK, so the web of the 1990s and early 2000s wasn’t terribly elegant. But it &lt;em&gt;was&lt;/em&gt; very easy to develop websites. All you had to do was plop some files on an Apache server and point a bit of XML at the appropriate resource. There was no notion of modules, or bundling, or minification, or code splitting. No Gulp or Grunt or Webpack or Broccoli. Just plain old HTML.&lt;/p&gt;
&lt;p&gt;What if I told you there was a way to make webdev simple again?&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="development" scheme="http://www.breck-mckye.com/tags/development/"/>
    
      <category term="javascript" scheme="http://www.breck-mckye.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Why is Front-End Development So Unstable?</title>
    <link href="http://www.breck-mckye.com/blog/2018/05/why-is-front-end-development-so-unstable/"/>
    <id>http://www.breck-mckye.com/blog/2018/05/why-is-front-end-development-so-unstable/</id>
    <published>2018-05-29T14:11:14.000Z</published>
    <updated>2024-04-14T19:49:02.970Z</updated>
    
    <content type="html"><![CDATA[<p>We all know the meme: by the time you’ve learned one front-end technology, another three have just been released. Also, that one you just learned? It’s deprecated.</p><p>What we don’t often see is an examination why.</p><a id="more"></a><p>The typical explanation (a la <code>r/programming</code>) seems to be something or other about webdevs being naturally impatient, faddish and incompetent, which may constitute a more general fallacy: assuming behaviour you cannot understand is caused by an entire group being foolish, wicked or greedy (whereas your own unwise behaviour is due exclusively to factors beyond your control).</p><p>Still, fallacy or no, we do have a problem - don’t we?</p><h2 id="Quantifying-the-issue"><a href="#Quantifying-the-issue" class="headerlink" title="Quantifying the issue"></a>Quantifying the issue</h2><p>Before we get carried away, it’s worth validating whether the meme really has basis in reality. Do front end technologies actually change that quickly?</p><p>In the sense of major view technologies, probably not. Consider this list of the highest ‘starred’ JavaScript front-end technologies on <a href="https://github.com/collections/front-end-javascript-frameworks" target="_blank" rel="noopener">Github</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------------------------+</span><br><span class="line">| Library          | Stars   | Released       | Age          |</span><br><span class="line">|------------------------------------------------------------+</span><br><span class="line">| React            | 96986   | March 2015     | 3 years      |</span><br><span class="line">| Vue              | 95727   | October 2015   | 2.5 years    |</span><br><span class="line">| Angular (1)      | 58531   | October 2010   | 7.5 years    |</span><br><span class="line">| jQuery           | 49061   | August 2006    | 11 years     |</span><br><span class="line">| Angular (2+)     | 36665   | December 2015  | 2.5 years    |</span><br><span class="line">| Backbone         | 27194   | October 2010   | 7.5 years    |</span><br><span class="line">| Polymer          | 19668   | May 2015       | 3 years      |</span><br><span class="line">| Ember            | 19003   | December 2011  | 6.5 years    |</span><br><span class="line">| Aurelia          | 10506   | June 2016      | 2 years      |</span><br><span class="line">| Knockout         | 8894    | July 2010      | 8 years      |</span><br><span class="line">+------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>2.5 years for the youngest isn’t <em>that</em> old in the scheme of things - it’s less than half the support lifespan of your typical desktop OS, for example - but it’s still a ways off our caricature. So what is causing this perception of rapid, even unsustainable change?</p><h2 id="React-and-friends"><a href="#React-and-friends" class="headerlink" title="React and friends"></a>React and friends</h2><p>It might be React. As powerful a tool as it is, it requires an army of helper modules and support libraries to be used seriously, and this is where the problem sets in. The React community is very big on what I would call the ‘microlibrary architecture’, where applications are composed of a myriad discrete, single-purpose JavaScript libraries, in homage to the <a href="https://homepage.cs.uri.edu/~thenry/resources/unix_art/ch01s06.html" target="_blank" rel="noopener">Unix philosophy</a>.</p><p>The advantage of this architecture is that you can easily adapt as new practices emerge, which makes sense at a time of rapid innovation (like the past few years). The disadvantage is that it increases your surface area for breaking changes and demands a great deal (often too much) vetting and selection of said microlibs.</p><p>And this is the thrust of my argument: what’s wrong with JavaScript isn’t the language [1], the web, or any technology in particular, but a poor ‘choice architecture’ that makes developers slaves to fads and trends.</p><h2 id="The-NPM-problem"><a href="#The-NPM-problem" class="headerlink" title="The NPM problem"></a>The NPM problem</h2><p>Modern JavaScript’s greatest asset - and liability - is NPM. It provides an enormous wealth of modules, catering to just about any specific purpose one can conceive, but very difficult to filter and curate. Which ones are really being supported? Which ones are actually functionally correct? Which ones aren’t really just vectors for evil malware? The only heuristic a JavaScript developer can really use is popularity - number of downloads and Github stars - which exacerbates faddishness.</p><p>There are other ways to validate a library, of course: you can read through Github issues and search for StackOverflow questions. You can do some testing or even examine the sourcecode for yourself (in most cases). But this takes time, which isn’t really warranted when choosing e.g. a date parsing doodad.</p><p>I will concede that this is something of a cultural weakness of JavaScript developers. As an interviewer I often like to ask candidates how they choose technologies, and it depresses me somewhat that popularity is the almost always the only marker they know. Software engineering is at least partly a research job and we need to train junior programmers research skills. But even if we did, the odds would still be stacked against them.</p><h2 id="Imagine-being-a-junior-developer"><a href="#Imagine-being-a-junior-developer" class="headerlink" title="Imagine being a junior developer"></a>Imagine being a junior developer</h2><p>Put yourself in the shoes of a junior-to-mid-level JavaScript developer, writing a new application for the first time.</p><p>It starts innocently enough. You have a completely clean slate and want to keep things simple. You are a devout Agilist and YAGNI is your watchword. So you begin with a ‘simple, barbones framework’. That sounds good, doesn’t it? (Even if it did not, that’s often the only choice you’ve got).</p><p>Being barebones it does little, so the task falls on your shoulders to choose some helper libraries. If you are doing frontend work, it might be helpers for Redux for forms and API requests. If backend, it might be middlewares for Express [2].</p><p>So you do a Google search, which reveals a Medium post that heartily recommends <em>X.js</em>. It later transpires the post was written by <em>X’s</em> author, though she never announces that particular conflict of interest (she does, however, provide a GitTip jar). Not that you could tell - all Medium articles look the same, so you can never rely on a ‘brand’ to identify reputable material.</p><p>You miss the replies pointing out some critical inadequacies in <em>X.js</em>, because Medium deliberately suppresses them, and move on to finding a _Y_.</p><p>This time you find a link on Twitter - with over a hundred hearts! You guess that’s a pretty good signal it’s been “curated” by a community more knowledgeable than yourself. You add a heart of your own in gratitude (like the hundred before) and follow the link to Github.</p><p>But not so fast. That link was old - the library is now deprecated. You can tell because the word <code>DEPRECATED</code> is slapped everywhere like <code>CONDEMNED</code> signs on a Scooby Doo themepark.</p><p>You see, <em>Y.js</em> was “object oriented”. You thought this was a good thing, vaguely recalling something from first year ComSci about Smalltalk and message passing. But apparently it is Very Bad.</p><p>Another Medium article tries to explain why, though its reasoning is hazy and packed in dense terminology you don’t recognise. It later turns out the terminology was invented by the post’s author, as were the neutral-looking external blog posts he cited as authorities to his argument.</p><p>It gets worse. The post claims that even mentioning OOP in a JavaScript interview will render you utterly unemployable! You are seriously disoriented now. Thankfully help is at hand - in the form of his $50 dollar JavaScript webdev course. You take a note of the link, thinking how lucky you are to have found it, and give another clap in gratitude. (Nineteen thousand and one).</p><p>So you move onto <em>Z.js</em>, which seems to have a lot more Github stars, though the documentation seems less useful. Lots of methods are listed, but how do I practically use it? You are heartened at least to see it uses something called ‘Standard JS’, which you assume has something to do with the ECMA Standards Committee. It doesn’t.</p><p>But how could you do better, Junior Developer? Who was there to guide you? The Senior Developers, too, are learning as they go. We’re caught in this avalanche too, just trying to keep up to date and remain employable.</p><p>So. You take the path of least resistance: you choose the Github project with the most votes, the most stars. And <strong>that</strong> is why JavaScript dev is driven by fads and hype.</p><h2 id="What-is-to-be-done"><a href="#What-is-to-be-done" class="headerlink" title="What is to be done?"></a>What is to be done?</h2><p>Like most natural complainers I am generally better at moaning about problems than, y’know, SOLVING them. But I have a few ideas:</p><h3 id="Be-wary-of-Medium"><a href="#Be-wary-of-Medium" class="headerlink" title="Be wary of Medium"></a>Be wary of Medium</h3><p>Medium incentivises clickbait somewhat and makes it harder to distinguish authoritative content. Classical blogging allows good authors to establish a distinct visual theme, which helps visitors recognise a source that’s helped them before.</p><h3 id="Be-wary-of-self-promotion"><a href="#Be-wary-of-self-promotion" class="headerlink" title="Be wary of self-promotion"></a>Be wary of self-promotion</h3><p>Over the last few years I’ve seen much more aggressive self-marketing in the JavaScript world, possibly due to the rise of paid online training materials and the employment/consulting advantage of being a Github ‘celebrity’. I’ve no problem with people being incentivised for good content, but increasingly I feel I see dishonest tactics: self-citation; invented, proprietary terminology (so searching takes you back to the author’s materials), and name-squatting (e.g. ‘Standard.js’)</p><h3 id="Consider-non-microlib-architectures"><a href="#Consider-non-microlib-architectures" class="headerlink" title="Consider non-microlib architectures"></a>Consider non-microlib architectures</h3><p>Try to start your projects in frameworks that provide a large surface area of features and don’t require many plugins to get productive - this will immediately reduce the number of moving parts and exposure to unexpected, breaking change. It’s one reason I’m very interested in <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a>. You could also use React as part of a starter kit or larger framework, like <a href="https://github.com/zeit/next.js/" target="_blank" rel="noopener">Next</a>.</p><h3 id="Don’t-over-sweat-the-employablity-thing"><a href="#Don’t-over-sweat-the-employablity-thing" class="headerlink" title="Don’t over-sweat the employablity thing"></a>Don’t over-sweat the employablity thing</h3><p>The only people who need to know a company’s whole stack inside and out on day zero are freelance contractors, who are paid a handsome wage to parachute in and get a project out the door. Otherwise, most employers are absolutely fine with you not knowing the ins and outs of the latest React helper library. So avoid the call to learn absolutely everything: most of it noise.</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>[1] Though it has many, many faults.</p><p>[2] Can you believe Express requires a middleware just to parse JSON POST bodies? Sorry, but that is utterly bananas.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We all know the meme: by the time you’ve learned one front-end technology, another three have just been released. Also, that one you just learned? It’s deprecated.&lt;/p&gt;
&lt;p&gt;What we don’t often see is an examination why.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="javascript, front-end" scheme="http://www.breck-mckye.com/tags/javascript-front-end/"/>
    
  </entry>
  
  <entry>
    <title>Review: The Crash Detectives - Christine Negroni</title>
    <link href="http://www.breck-mckye.com/blog/2018/03/Microreview-The-Crash-Detectives-Christine-Negroni/"/>
    <id>http://www.breck-mckye.com/blog/2018/03/Microreview-The-Crash-Detectives-Christine-Negroni/</id>
    <published>2018-03-26T17:10:50.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>On a routine night-flight over the Pacific Ocean, one of the world’s most high-tech passenger aircraft broadcast one unremarkable radio message before simply vanishing from the face of the earth. No landing was recorded and no wreckage has ever been found. Ships have scoured the seas and every possible component of the plane has been scrutinised for fresh leads. No-one has any. Was the flight just an unlucky victim of mechanical failure, poor weather and pilot error? Or was something more sinister at work?</p><p>You might be forgiven for thinking of the Malaysian Airlines’ <em>MH370</em>, which disappeared in 2014 under these exact circumstances. But this was the <em>Hawaii Clipper</em> - some eighty years earlier. It turns out these kinds of aviation mysteries aren’t nearly as rare as you’d think. Christine Negroni’s <em>The Crash Detectives</em> is a lively and readable account of “the world’s most mysterious air disasters”.</p><a id="more"></a><p>Aerophobes fear not: this book is no almanac of fire and destruction. It is really about the extraordinary systems, technology and people who not only keep us safe in the air but continuously improve airline safety on the ground, meticulously poring over the wreckage of each accident to ensure it can never happen again. You will finish this book more confident about flying than ever before.</p><p>But Negroni is no gearhead and her book is less about the tech than the human factor: how pilots react to stressful situations and pull together as a team. Sometimes they triumph, and these make the book’s most uplifting moments. But sometimes they fail - like one crew so distracted by a broken dashboard light they failed to notice their plane tank into the Florida Everglades. Rather than laugh, though, Negroni would rather ask why: what is it that makes intelligent humans do such silly-seeming things, and how can we design systems to stop it?</p><p>She also takes a look at some genuine conspiracies in aviation history, like the mysterious death of a UN Secretary-General and some strange cases during the Iran-Contra affair. It’s genuinely interesting to see what cover-ups actually look like: not hundreds of willing participants and ‘crisis actors’ hired by murky government agencies in a perfectly orchestrated whitewash, but something much more mundane: hasty conclusions, awkwardly revised pathology reports, reams of legal threats and politically sympathetic incompetents installed as investigators.</p><p><em>The Crash Detectives</em> is not just a book for aviation nerds, like me. It should interest anybody who is curious about psychology, human factors, heroism or just inquisitive about the magnificent flying machines we take for granted every day.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;On a routine night-flight over the Pacific Ocean, one of the world’s most high-tech passenger aircraft broadcast one unremarkable radio message before simply vanishing from the face of the earth. No landing was recorded and no wreckage has ever been found. Ships have scoured the seas and every possible component of the plane has been scrutinised for fresh leads. No-one has any. Was the flight just an unlucky victim of mechanical failure, poor weather and pilot error? Or was something more sinister at work?&lt;/p&gt;
&lt;p&gt;You might be forgiven for thinking of the Malaysian Airlines’ &lt;em&gt;MH370&lt;/em&gt;, which disappeared in 2014 under these exact circumstances. But this was the &lt;em&gt;Hawaii Clipper&lt;/em&gt; - some eighty years earlier. It turns out these kinds of aviation mysteries aren’t nearly as rare as you’d think. Christine Negroni’s &lt;em&gt;The Crash Detectives&lt;/em&gt; is a lively and readable account of “the world’s most mysterious air disasters”.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="reviews" scheme="http://www.breck-mckye.com/tags/reviews/"/>
    
  </entry>
  
  <entry>
    <title>In praise of procrastination</title>
    <link href="http://www.breck-mckye.com/blog/2018/03/In-praise-of-procrastination/"/>
    <id>http://www.breck-mckye.com/blog/2018/03/In-praise-of-procrastination/</id>
    <published>2018-03-23T20:08:43.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>Soft light glows behind the curtains, hugging the wall. The air is cool, thin and still. Nothing stirs. Head tilted downwards, one sock on and one sock off, I am about to be late for work. But I would rather think about an argument I heard on the radio.</p><p>What exactly is procrastination? I like to think of it as a conflict between the superego and the id. I am supposed to do something and have turned my spirit towards it. But my body and emotions are quietly rebelling. What if they had good reason to?</p><a id="more"></a><h2 id="Procrastination-helps-us-take-care-of-myself"><a href="#Procrastination-helps-us-take-care-of-myself" class="headerlink" title="Procrastination helps us take care of myself"></a>Procrastination helps us take care of myself</h2><p>Why was I procrastinating?</p><p>The obvious explanation is that I was just being lazy. I let my mind drift when it should have been fixed on its purpose, coursing relentlessly towards my goal like a shark stalking its prey.</p><p>But could there be a more humane excuse? Maybe I was stalling because I just hadn’t given myself time to get up. Maybe I was daydreaming because I can’t just switch from ‘sleep mode’ to ‘work mode’ like a robot vacuum cleaner. I need to get up earlier and enjoy my morning first. I have to to ruminate over what I heard on Radio 4’s <em>Today Programme</em> because that’s just something important to me.</p><p>So we might say my procrastination tells me I’m neglecting myself. I’m not getting up because I’m not ready, and rather than suppressing that perhaps I need to acknowledge it.</p><h2 id="Procrastination-is-honest"><a href="#Procrastination-is-honest" class="headerlink" title="Procrastination is honest"></a>Procrastination is honest</h2><p>A person procrastinating is just ‘being’. They are not moving towards any goal or change, and their reason for not doing so comes entirely from within. There is a kind of honesty to that.</p><p>What would we make of a person who could never ‘just be’, who was always on the go? I think I’d wonder if there was something wrong with them. Why can’t they be at peace with themselves? What are they distracting themselves from?</p><h2 id="Procrastination-can-correct-us"><a href="#Procrastination-can-correct-us" class="headerlink" title="Procrastination can correct us"></a>Procrastination can correct us</h2><p>A person dithering is giving audience to a full and healthy range of emotions. Fear, doubt, tiredness, contentment - all of these can tell us something that matters, even if it’s not something we particularly want to hear.</p><p>A person on the go, on the other hand, is putting their trust entirely in their superego. They think that when the brain’s executive function says - you, run that mile! you, practice that guitar! - obedience is the path to happiness. But the superego has blind spots.</p><p>As a young man at Cambridge I lived and breathed my field and became almost possessed my studies. At age eighteen I had already decided that literary criticism was the only thing the world could offer my interest and every day was pledged to that end. I worshiped my cold, sharp will almost as much as my subject, and I lived much like a monk tending to his holy devotions. I ignored all my other needs and spurned the world quite proudly.</p><p>Naturally, it was a failure. No-one can live like that. My relentless studying and utter intolerance for personal failure sent me into a spiral of obsession, compulsion and exhaustion that almost cost me my degree. I had placed too much trust in my superego and not enough in the body and emotions that were trying to tell me to take care of myself, have a rest, be more than just a student.</p><p>How often have you thrown yourself into the wrong goal? Perhaps an impressive-sounding career that left you miserable? It’s likely your superego that got you there, but I bet it wasn’t your superego that got you out. The tension at the back of your neck, the cold drop in your stomach that tells you ‘this job is all wrong! this place is all wrong! all this, it’s all wrong!’ - that’s your id, loosely defined, and that’s what tells us to procrastinate. We should give it more credit.</p><h2 id="Procrastination-can-be-virtuous"><a href="#Procrastination-can-be-virtuous" class="headerlink" title="Procrastination can be virtuous"></a>Procrastination can be virtuous</h2><p>I don’t trust my superego, because I know my limitations and how often my ambitions run ahead of them. And I’m not sure I trust people who can’t procrastinate, either, because people with neither fear, uncertainty nor self-doubt can be terrible individuals. One of the most productive and relentless men I ever knew was also a mendacious sociopath. He was as merciless with you as he was with himself.</p><p>But a person who does nothing but procrastinate might be living life dishonestly. If they keep deciding one thing and then quietly resisting they may be making decisions that tally poorly with their real needs. Maturity involves listening to your doubt, indecision and fatigue, taking them seriously, along with all the dreams and the commitments and the ambition, and reconciling them realistically.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Soft light glows behind the curtains, hugging the wall. The air is cool, thin and still. Nothing stirs. Head tilted downwards, one sock on and one sock off, I am about to be late for work. But I would rather think about an argument I heard on the radio.&lt;/p&gt;
&lt;p&gt;What exactly is procrastination? I like to think of it as a conflict between the superego and the id. I am supposed to do something and have turned my spirit towards it. But my body and emotions are quietly rebelling. What if they had good reason to?&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="personal" scheme="http://www.breck-mckye.com/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>MGS2 Tanker as Solidus</title>
    <link href="http://www.breck-mckye.com/blog/2017/12/MGS2-Tanker-as-Solidus/"/>
    <id>http://www.breck-mckye.com/blog/2017/12/MGS2-Tanker-as-Solidus/</id>
    <published>2017-12-29T19:23:36.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve discovered a simple mod for MGS2 PC that allows you to play the Tanker chapter as alternate characters. Here, I use it to play as Solidus Snake, perfect clone of Big Boss and the endgame antagonist.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/6CUaXCrHJM0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><a id="more"></a><p>The mod also includes a package to use all the plant weapons (except the HF blade, sadly). It was produced by the now-defunct RedCode Interactive.</p><p>Demonstration of the mod:</p><div class="video-container"><iframe src="https://www.youtube.com/embed/PygHsrGkPqE" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>Mod files: <a href="https://tinyurl.com/ybzx8jk3" title="" target="">tinyurl</a></p><p>Mod file mirror: <a href="https://www.dropbox.com/s/e8sh1zewwztfk93/RCi_Metal-gear-solid-2-pc_tanker-mods.rar?dl=0" title="" target="">mirror</a></p><p>To use the mod, unzip and point the installer at whatever directory holds your MGS2 installation. This mod tool replaces files, so you might want to backup your MGS2 folder first.</p><p>You can play using several models, including Fortune, MGS1 Ocelot, and a Gurlukovich Commando - but Solidus remains my personal favourite. Sadly there seems to be no equivalent mod for the Plant chapter.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve discovered a simple mod for MGS2 PC that allows you to play the Tanker chapter as alternate characters. Here, I use it to play as Solidus Snake, perfect clone of Big Boss and the endgame antagonist.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/6CUaXCrHJM0&quot; frameborder=&quot;0&quot; loading=&quot;lazy&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="videogames" scheme="http://www.breck-mckye.com/tags/videogames/"/>
    
      <category term="videos" scheme="http://www.breck-mckye.com/tags/videos/"/>
    
  </entry>
  
  <entry>
    <title>The Supposed Half Life 3 Ending? I Just Don&#39;t Buy It.</title>
    <link href="http://www.breck-mckye.com/blog/2017/09/the-half-life-3-ending-i-just-dont-buy-it/"/>
    <id>http://www.breck-mckye.com/blog/2017/09/the-half-life-3-ending-i-just-dont-buy-it/</id>
    <published>2017-09-07T11:00:00.000Z</published>
    <updated>2024-04-14T19:49:02.970Z</updated>
    
    <content type="html"><![CDATA[<p>…because the Half Life series is all about Gordon’s ascent to power.<br><a id="more"></a></p><p>You start the first game literally ‘on a rail’, trapped on a commuter train shuttling you towards a humdrum day as a ‘research assistant’ at the Black Mesa Research Facility. This fast-paced go-getting career entails climbing ladders, pressing brightly lit buttons and pushing carts on the command of uppity scientists who watch your every move.</p><p><img src="/images/2017/half-life/rail-start.jpg" alt=""></p><p>You are late, and everyone is most keen to ‘helpfully’ remind you of the fact. Gordon is on the bottom rung. He barely even earned the distinction of his PhD.</p><p>But as he goes on he gains more agency and notoriety. He stops fleeing for the surface as starts seeking out the Lambda team. He destroys bigger and badder targets and the military begin to single him out. Eventually he becomes the personal saviour of Lambda and is entrusted as the only man with enough combat experience to take on the Xenian threat at source. By the end of the game the Nihilanth, the alien leader himself, is actually addressing you by name!</p><p>And this is the point of the ending – to remind us just how much Gordon has changed. He started the game on a rail, but his last action happens to be the very first ‘choice’ the player can make interactively – to step off the train into their new career as intergalactic assassin-for-hire. That’s quite a promotion.</p><p><img src="/images/2017/half-life/rail-end.jpg" alt=""></p><p>Half Life 2 does gets a bit carried away with its Gordon-as-messiah trope and may approach parody a couple of times. But the game’s central arc always felt to me a pretty well-executed power fantasy: in the first half Valve builds up the combine threat, in the second half Gordon overthrows it.</p><p>If there’s a single moment where it all pivots it’s when Gordon deactivates the first thumper on the approach to Nova Prospekt beach. Combine technology has pushed you around all game, blocking your way, covered in indecipherable heiroglyphs and uttely indestructable. Now you take control of it directly, break into Overwatch territory and tear their fortress down. It’s giddy stuff.</p><p><img src="/images/2017/half-life/thumper.jpg" alt=""></p><p>By the later Episodes Gordon is a free agent entirely. The G-Man loses control and can only beg the player to save Alyx Vance. Episode 2 opens with a rail crash, and I’ve always felt this is a callback to the tighly controlled train sequences of the earlier games. Everywhere we look are wrecks of broken carriages.</p><p><img src="/images/2017/half-life/wreck.jpg" alt=""></p><p>By the end of the game Gordon is entirely independent: Eli’s death removes the last authority figure and Gordon stands with Alyx by choice.</p><p>And now we’re told that HL3 was to subvert this arc entirely? That Gordon and the Borealis were nothing but an insignificant mote, a half-second speck in the Combine multiverse, barely earning a synapse’s pulse in the intergalactic sentience? It’s inconsistent and it’s shoddy. You can get away with this if you do the work laying down the clues early on. You can get away if there’s always some tension, always some uncertainty just how powerful the hero is. But you can’t get away with telling the player how powerful they are for fifteen years, growing and growing their silhouette and their accomplishments, then popping the bubble in the final act. That’s having your cake and eating it.</p><p><img src="/images/2017/half-life/smirk.jpg" alt=""></p><p>It’s also a cheap way to cover up plots you can’t or won’t tie up. You can’t generate all these lines, set up all these places and characters, then tell us we’re not getting a proper ending because the universe is, like, so incomprehensible to our monkey minds, maaan. But stick around for the spin-off series because Alyx is still alive and we ain’t done making money yet! You can accuse Valve of many things, but the one thing they’ve never done is eke out the HL franchise for extra cash.</p><p>So, I don’t buy it. I am convinced Laidlaw’s “fanfic” was nothing more than that – a half-formed offshoot from an old revision of the plot, a flight of fancy or just a bit of speculation how the whole thing could play out. I believe the real HL3 plot was never nailed down and never now shall be.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;…because the Half Life series is all about Gordon’s ascent to power.&lt;br&gt;
    
    </summary>
    
    
    
      <category term="videogames" scheme="http://www.breck-mckye.com/tags/videogames/"/>
    
      <category term="opinion" scheme="http://www.breck-mckye.com/tags/opinion/"/>
    
  </entry>
  
  <entry>
    <title>Review: Utopia for Realists, Rutger Bregman</title>
    <link href="http://www.breck-mckye.com/blog/2017/07/review-utopia-for-realists-rutger-bregman/"/>
    <id>http://www.breck-mckye.com/blog/2017/07/review-utopia-for-realists-rutger-bregman/</id>
    <published>2017-07-25T11:00:00.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>Rutger Bregman thinks the time has come for Universal Basic Income: to replace all benefits and state support with a single, basic, unconditional wage, paid to every adult in our society. Rather than plunging society into idleness and poverty, the argument goes, humans would continue to work, but rather than idling their days in useless occupations, non-jobs that only serve consumer capitalism, they would labour for the causes that truly motivate them.</p><p>With shrinking manufacturing industry and the threat of automation as hot-button topics in the press, then, <em>Utopia for Realists</em> will be read eagerly by technosceptics, anti-capitalists and futurists alike. But how well will it satisfy them?<br><a id="more"></a></p><p>Here’s what I think is a fair-minded assessment: UFR is a fairly short book with a very ambitious scope, but that suffers from being spread so thinly. It raises lots of interesting ideas, but that doesn’t cover any of them with enough depth to make them stick.</p><p>Things started poorly. The book is prefaced by four pages of positive review quotes, presumably inserted as encouragement for the indecisive bookshop customer. At least I hope that’s who it’s all for, because it’s a pretty weird species of self-congratulation if not. These reviews all gush over Bregman’s insight and perceptive power, but none of them come from economists or political scientists: several are written by Bregman’s fellow UBI-campaigners, another handful from tech entrepreneurs, and one praising the writing, extracted from an otherwise negative review in the <em>Independent</em>. One may have been from a popstar, too, I can’t remember.</p><p>The other thing was the typesetting. I know this must sound like a trivial complaint, but the book is set with extremely wide margins and very loose leading between the lines, so much so that the 260-page work could have been easily printed in half those pages. The cynic in me wondered if the book was padded to make it look more profound. So you may say I started <em>UFR</em> with a little prejudice.</p><p>My problem is that Bregman constructs his argument by leaping between a handful of studies and historical test cases, quoting friendly think-tanks second hand, and making vague assertions about the costs of existing benefit systems and the unhappiness of the west. A charitable take might be that his style of argument is journalistic rather than academic. He certainly knows how to write punchy prose, and not to get lost in details, in a desert of percentages and statistics with lots of zeroes in them. But the side-effect of this breeziness is a lack of serious detail or reliable numbers.</p><p>That is ultimately the book’s gravest sin: it never actually calculates the price of UBI. You’d think this would be the first order of the day, but all it does is assert society is more than productive enough already (Keynes said it would happen, so it must be so, apparently), and that we can probably save some cash just by dint of streamlining benefits anyway. How much money? It’s never quantified.</p><p><em>Utopia for Realists</em> does have its moments. If you feel dissatisfied with how capitalism is working, it will give you many memorable factoids for pointed conversation. It torches several populist myths about welfare and immigration, and it makes a solid case that what the poor need isn’t education, interference, or community centres, but money. There’s a great chapter on the “Broadway Experiment”, when thirteen homeless men in London were given £3000 strings-free and left to get on with it.</p><p>But read it sceptically – Bregman recycles material from anti-capitalist groups and pro-UBI campaigners quite uncritically, and he rarely unpacks their evidence. (To his credit, he does provide a helpful bibliography, with internet links wherever possible).</p><p>Let’s take an example. At one point, the author argues that the need to work pushes citizens into jobs that may actively harm the common good. With UBI, this would no longer be necessary. One industry he cites is advertising, where workers ostensibly ‘destroy’ £7 of value for every one £1 created. Disregarding the basic counterargument that most people in marketing and PR are probably there by choice, where does this £7 figure come from? The <em>New Economic Foundation</em>, a using a methodology I would classify as contentious at best: It counted all consumption above the Joseph Roundtree Foundation’s “minimum citizenry level” as “unnecessary, and therefore harmful”. It included unquantified (and frankly unquantifiable) harms to mental health caused by “advertising media”, and it also counted in some very broad-brush assumptions about ecological impact. Even as someone who is very sympathetic to the NEF’s political ideas: I think that figure is bogus.</p><p>It may seem a minor point – who really doubts that humans have better things to do than advertising? – but it underlines a general sort of sloppiness and poor judgement on the part of the author. Bregman kept throwing these quotes and the odd supportive statistic at me, but I read each of them with increasing scepticism and unease. It left me distrustful of anything the author wrote.</p><p>I came into <em>UFR</em> eager to be convinced, ready to be ignited with positivity and conviction, marching with the banner of the good idea whose time as come, the kind that ends up looking so inevitable future folk can only look back and wonder incredulously how it might have ever been resisted. But I was left deflated and annoyed: Bregman’s arguments are superficial and unserious. His book is oddly structured and lacks focus. It ambled around irrelevant topics, like a chapter on the history of GDP, and one on free movement, quite out of the blue.</p><p>Then there is a chapter on automation. This was the meat and gristle I was really waiting for, hearing of self-driving cars about to replace entire droves of logistics workers, and warehouse drones threatening those thousands who work tirelessly through December dark to get us our Christmas gifts on time. This should be the good stuff. Yet all the author does is assert that computers may retire some unspecified range of jobs, probably, over some kind of timescale. Also that the Luddites were a thing. It’s never fleshed out how big the threat is nor how hard the jobs are to replace. This should be Bregman’s coup de grace – he bodges the execution.</p><p>If <em>Utopia for Realists</em> is light on the details, it is light on the theory too. There is no poltical philosophy here. Bregman asserts that more equality makes us happier, but he never takes a moment to ask whether it’s morally desirable. I’m a socialist and even I think that one can’t be taken for granted. And for a historian, Bregman seems unreflectively Whiggist: he suggests all history has been nothing a ceaseless, beautiful, great march forwards; that we will keep going on and on and that there will always be a bright new idea waiting to advance us. <em>UFR</em> all but says UBI is a historical necessity just by dint of being new and progressive.</p><p><em>Utopia for Realists</em> is a TED talk expanded into a book. It is slickly argued and it successfully argues that don’t just work out of hunger, but out of their basic social natures. But like TED it is shallow, it is self-promotional, it is too excited about the solutions and not thoughtful enough about the problems. My sceptics’ antennae twirled madly throughout and I left half the text marked with my trademark ‘wavy underline of doubt’. I was not convinced.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rutger Bregman thinks the time has come for Universal Basic Income: to replace all benefits and state support with a single, basic, unconditional wage, paid to every adult in our society. Rather than plunging society into idleness and poverty, the argument goes, humans would continue to work, but rather than idling their days in useless occupations, non-jobs that only serve consumer capitalism, they would labour for the causes that truly motivate them.&lt;/p&gt;
&lt;p&gt;With shrinking manufacturing industry and the threat of automation as hot-button topics in the press, then, &lt;em&gt;Utopia for Realists&lt;/em&gt; will be read eagerly by technosceptics, anti-capitalists and futurists alike. But how well will it satisfy them?&lt;br&gt;
    
    </summary>
    
    
    
      <category term="reviews" scheme="http://www.breck-mckye.com/tags/reviews/"/>
    
      <category term="politics" scheme="http://www.breck-mckye.com/tags/politics/"/>
    
  </entry>
  
  <entry>
    <title>Slaughterhouse Five: Micro-review</title>
    <link href="http://www.breck-mckye.com/blog/2017/05/slaughterhouse-five-micro-review/"/>
    <id>http://www.breck-mckye.com/blog/2017/05/slaughterhouse-five-micro-review/</id>
    <published>2017-05-02T11:00:00.000Z</published>
    <updated>2024-04-14T19:49:02.966Z</updated>
    
    <content type="html"><![CDATA[<p>Fighting for the US army in World War Two, Kurt Vonnegut was captured by the Germans and sent to a forced labour camp in Dresden. There he witnessed the famous Dresden firebombing, when Allied air raids levelled much of the city and killed twenty-five thousand people, mostly civilians. This experience affected him so profoundly, that he tried several years to write a novel that would find sense in it. Eventually he concluded none could be found and wrote <em>Slaughterhouse Five</em> instead.<br><a id="more"></a></p><p>Billy Pilgrim, Vonnegut’s semi-auto-biographical stand-in, is a war veteran who experiences time in a non-linear order after being visited by four-dimensional aliens who can see all times at once. Now, like them, his mind slips between present and past, sudden flashbacks returning him to the war. They should be traumatic: Billy is often in mortal danger – but he experiences it all with a kind of beatific calm, finding curious beauty and humour in the most unlikely places. And yet, why does he return to the present day and find himself sobbing?</p><p>By moving between times and places, calling back to earlier events and compulsively repeating phrases and images, <em>Slaughterhouse Five</em> isn’t just a marvellous illustration of post-traumatic stress disorder – it’s also an introduction to postmodernism. This movement shies away from imposing greater meaning on human experience, because it knows to do so is always reductive, and sometimes even a step towards totalitarian thinking.</p><p>Despite its name, <em>Slaughterhouse Five</em> has little violence, and much wit. It is a short, self-contained book that ends with a satisfying kind of circularity. It does not linger with questions, but it does its job: Vonnegut writes it, gets it out of his system, and moves on with his life.</p><p><em>These micro-reviews surmise a book, essay or work in 200-300 words. I’m writing them to practice slimming down my prose.</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Fighting for the US army in World War Two, Kurt Vonnegut was captured by the Germans and sent to a forced labour camp in Dresden. There he witnessed the famous Dresden firebombing, when Allied air raids levelled much of the city and killed twenty-five thousand people, mostly civilians. This experience affected him so profoundly, that he tried several years to write a novel that would find sense in it. Eventually he concluded none could be found and wrote &lt;em&gt;Slaughterhouse Five&lt;/em&gt; instead.&lt;br&gt;
    
    </summary>
    
    
    
      <category term="reviews" scheme="http://www.breck-mckye.com/tags/reviews/"/>
    
      <category term="literature" scheme="http://www.breck-mckye.com/tags/literature/"/>
    
  </entry>
  
</feed>
